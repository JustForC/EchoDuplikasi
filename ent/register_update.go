// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Kynesia/ent/achievement"
	"Kynesia/ent/biodata"
	"Kynesia/ent/education"
	"Kynesia/ent/family"
	"Kynesia/ent/language"
	"Kynesia/ent/predicate"
	"Kynesia/ent/register"
	"Kynesia/ent/scholarship"
	"Kynesia/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RegisterUpdate is the builder for updating Register entities.
type RegisterUpdate struct {
	config
	hooks    []Hook
	mutation *RegisterMutation
}

// Where appends a list predicates to the RegisterUpdate builder.
func (ru *RegisterUpdate) Where(ps ...predicate.Register) *RegisterUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetStatusOne sets the "statusOne" field.
func (ru *RegisterUpdate) SetStatusOne(i int) *RegisterUpdate {
	ru.mutation.ResetStatusOne()
	ru.mutation.SetStatusOne(i)
	return ru
}

// AddStatusOne adds i to the "statusOne" field.
func (ru *RegisterUpdate) AddStatusOne(i int) *RegisterUpdate {
	ru.mutation.AddStatusOne(i)
	return ru
}

// SetStatusTwo sets the "statusTwo" field.
func (ru *RegisterUpdate) SetStatusTwo(i int) *RegisterUpdate {
	ru.mutation.ResetStatusTwo()
	ru.mutation.SetStatusTwo(i)
	return ru
}

// SetNillableStatusTwo sets the "statusTwo" field if the given value is not nil.
func (ru *RegisterUpdate) SetNillableStatusTwo(i *int) *RegisterUpdate {
	if i != nil {
		ru.SetStatusTwo(*i)
	}
	return ru
}

// AddStatusTwo adds i to the "statusTwo" field.
func (ru *RegisterUpdate) AddStatusTwo(i int) *RegisterUpdate {
	ru.mutation.AddStatusTwo(i)
	return ru
}

// SetOnlineInterview sets the "onlineInterview" field.
func (ru *RegisterUpdate) SetOnlineInterview(s string) *RegisterUpdate {
	ru.mutation.SetOnlineInterview(s)
	return ru
}

// SetNillableOnlineInterview sets the "onlineInterview" field if the given value is not nil.
func (ru *RegisterUpdate) SetNillableOnlineInterview(s *string) *RegisterUpdate {
	if s != nil {
		ru.SetOnlineInterview(*s)
	}
	return ru
}

// ClearOnlineInterview clears the value of the "onlineInterview" field.
func (ru *RegisterUpdate) ClearOnlineInterview() *RegisterUpdate {
	ru.mutation.ClearOnlineInterview()
	return ru
}

// SetInterviewTime sets the "interviewTime" field.
func (ru *RegisterUpdate) SetInterviewTime(t time.Time) *RegisterUpdate {
	ru.mutation.SetInterviewTime(t)
	return ru
}

// SetNillableInterviewTime sets the "interviewTime" field if the given value is not nil.
func (ru *RegisterUpdate) SetNillableInterviewTime(t *time.Time) *RegisterUpdate {
	if t != nil {
		ru.SetInterviewTime(*t)
	}
	return ru
}

// ClearInterviewTime clears the value of the "interviewTime" field.
func (ru *RegisterUpdate) ClearInterviewTime() *RegisterUpdate {
	ru.mutation.ClearInterviewTime()
	return ru
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (ru *RegisterUpdate) AddUserIDs(ids ...int) *RegisterUpdate {
	ru.mutation.AddUserIDs(ids...)
	return ru
}

// AddUser adds the "user" edges to the User entity.
func (ru *RegisterUpdate) AddUser(u ...*User) *RegisterUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ru.AddUserIDs(ids...)
}

// AddScholarshipIDs adds the "scholarship" edge to the Scholarship entity by IDs.
func (ru *RegisterUpdate) AddScholarshipIDs(ids ...int) *RegisterUpdate {
	ru.mutation.AddScholarshipIDs(ids...)
	return ru
}

// AddScholarship adds the "scholarship" edges to the Scholarship entity.
func (ru *RegisterUpdate) AddScholarship(s ...*Scholarship) *RegisterUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.AddScholarshipIDs(ids...)
}

// AddAchievementIDs adds the "achievement" edge to the Achievement entity by IDs.
func (ru *RegisterUpdate) AddAchievementIDs(ids ...int) *RegisterUpdate {
	ru.mutation.AddAchievementIDs(ids...)
	return ru
}

// AddAchievement adds the "achievement" edges to the Achievement entity.
func (ru *RegisterUpdate) AddAchievement(a ...*Achievement) *RegisterUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.AddAchievementIDs(ids...)
}

// AddBiodatumIDs adds the "biodata" edge to the Biodata entity by IDs.
func (ru *RegisterUpdate) AddBiodatumIDs(ids ...int) *RegisterUpdate {
	ru.mutation.AddBiodatumIDs(ids...)
	return ru
}

// AddBiodata adds the "biodata" edges to the Biodata entity.
func (ru *RegisterUpdate) AddBiodata(b ...*Biodata) *RegisterUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ru.AddBiodatumIDs(ids...)
}

// AddEducationIDs adds the "education" edge to the Education entity by IDs.
func (ru *RegisterUpdate) AddEducationIDs(ids ...int) *RegisterUpdate {
	ru.mutation.AddEducationIDs(ids...)
	return ru
}

// AddEducation adds the "education" edges to the Education entity.
func (ru *RegisterUpdate) AddEducation(e ...*Education) *RegisterUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ru.AddEducationIDs(ids...)
}

// AddFamilyIDs adds the "family" edge to the Family entity by IDs.
func (ru *RegisterUpdate) AddFamilyIDs(ids ...int) *RegisterUpdate {
	ru.mutation.AddFamilyIDs(ids...)
	return ru
}

// AddFamily adds the "family" edges to the Family entity.
func (ru *RegisterUpdate) AddFamily(f ...*Family) *RegisterUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ru.AddFamilyIDs(ids...)
}

// AddLanguageIDs adds the "language" edge to the Language entity by IDs.
func (ru *RegisterUpdate) AddLanguageIDs(ids ...int) *RegisterUpdate {
	ru.mutation.AddLanguageIDs(ids...)
	return ru
}

// AddLanguage adds the "language" edges to the Language entity.
func (ru *RegisterUpdate) AddLanguage(l ...*Language) *RegisterUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ru.AddLanguageIDs(ids...)
}

// Mutation returns the RegisterMutation object of the builder.
func (ru *RegisterUpdate) Mutation() *RegisterMutation {
	return ru.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (ru *RegisterUpdate) ClearUser() *RegisterUpdate {
	ru.mutation.ClearUser()
	return ru
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (ru *RegisterUpdate) RemoveUserIDs(ids ...int) *RegisterUpdate {
	ru.mutation.RemoveUserIDs(ids...)
	return ru
}

// RemoveUser removes "user" edges to User entities.
func (ru *RegisterUpdate) RemoveUser(u ...*User) *RegisterUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ru.RemoveUserIDs(ids...)
}

// ClearScholarship clears all "scholarship" edges to the Scholarship entity.
func (ru *RegisterUpdate) ClearScholarship() *RegisterUpdate {
	ru.mutation.ClearScholarship()
	return ru
}

// RemoveScholarshipIDs removes the "scholarship" edge to Scholarship entities by IDs.
func (ru *RegisterUpdate) RemoveScholarshipIDs(ids ...int) *RegisterUpdate {
	ru.mutation.RemoveScholarshipIDs(ids...)
	return ru
}

// RemoveScholarship removes "scholarship" edges to Scholarship entities.
func (ru *RegisterUpdate) RemoveScholarship(s ...*Scholarship) *RegisterUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ru.RemoveScholarshipIDs(ids...)
}

// ClearAchievement clears all "achievement" edges to the Achievement entity.
func (ru *RegisterUpdate) ClearAchievement() *RegisterUpdate {
	ru.mutation.ClearAchievement()
	return ru
}

// RemoveAchievementIDs removes the "achievement" edge to Achievement entities by IDs.
func (ru *RegisterUpdate) RemoveAchievementIDs(ids ...int) *RegisterUpdate {
	ru.mutation.RemoveAchievementIDs(ids...)
	return ru
}

// RemoveAchievement removes "achievement" edges to Achievement entities.
func (ru *RegisterUpdate) RemoveAchievement(a ...*Achievement) *RegisterUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ru.RemoveAchievementIDs(ids...)
}

// ClearBiodata clears all "biodata" edges to the Biodata entity.
func (ru *RegisterUpdate) ClearBiodata() *RegisterUpdate {
	ru.mutation.ClearBiodata()
	return ru
}

// RemoveBiodatumIDs removes the "biodata" edge to Biodata entities by IDs.
func (ru *RegisterUpdate) RemoveBiodatumIDs(ids ...int) *RegisterUpdate {
	ru.mutation.RemoveBiodatumIDs(ids...)
	return ru
}

// RemoveBiodata removes "biodata" edges to Biodata entities.
func (ru *RegisterUpdate) RemoveBiodata(b ...*Biodata) *RegisterUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ru.RemoveBiodatumIDs(ids...)
}

// ClearEducation clears all "education" edges to the Education entity.
func (ru *RegisterUpdate) ClearEducation() *RegisterUpdate {
	ru.mutation.ClearEducation()
	return ru
}

// RemoveEducationIDs removes the "education" edge to Education entities by IDs.
func (ru *RegisterUpdate) RemoveEducationIDs(ids ...int) *RegisterUpdate {
	ru.mutation.RemoveEducationIDs(ids...)
	return ru
}

// RemoveEducation removes "education" edges to Education entities.
func (ru *RegisterUpdate) RemoveEducation(e ...*Education) *RegisterUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ru.RemoveEducationIDs(ids...)
}

// ClearFamily clears all "family" edges to the Family entity.
func (ru *RegisterUpdate) ClearFamily() *RegisterUpdate {
	ru.mutation.ClearFamily()
	return ru
}

// RemoveFamilyIDs removes the "family" edge to Family entities by IDs.
func (ru *RegisterUpdate) RemoveFamilyIDs(ids ...int) *RegisterUpdate {
	ru.mutation.RemoveFamilyIDs(ids...)
	return ru
}

// RemoveFamily removes "family" edges to Family entities.
func (ru *RegisterUpdate) RemoveFamily(f ...*Family) *RegisterUpdate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ru.RemoveFamilyIDs(ids...)
}

// ClearLanguage clears all "language" edges to the Language entity.
func (ru *RegisterUpdate) ClearLanguage() *RegisterUpdate {
	ru.mutation.ClearLanguage()
	return ru
}

// RemoveLanguageIDs removes the "language" edge to Language entities by IDs.
func (ru *RegisterUpdate) RemoveLanguageIDs(ids ...int) *RegisterUpdate {
	ru.mutation.RemoveLanguageIDs(ids...)
	return ru
}

// RemoveLanguage removes "language" edges to Language entities.
func (ru *RegisterUpdate) RemoveLanguage(l ...*Language) *RegisterUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ru.RemoveLanguageIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RegisterUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ru.hooks) == 0 {
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RegisterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			if ru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RegisterUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RegisterUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RegisterUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ru *RegisterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   register.Table,
			Columns: register.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: register.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.StatusOne(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: register.FieldStatusOne,
		})
	}
	if value, ok := ru.mutation.AddedStatusOne(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: register.FieldStatusOne,
		})
	}
	if value, ok := ru.mutation.StatusTwo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: register.FieldStatusTwo,
		})
	}
	if value, ok := ru.mutation.AddedStatusTwo(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: register.FieldStatusTwo,
		})
	}
	if value, ok := ru.mutation.OnlineInterview(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: register.FieldOnlineInterview,
		})
	}
	if ru.mutation.OnlineInterviewCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: register.FieldOnlineInterview,
		})
	}
	if value, ok := ru.mutation.InterviewTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: register.FieldInterviewTime,
		})
	}
	if ru.mutation.InterviewTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: register.FieldInterviewTime,
		})
	}
	if ru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   register.UserTable,
			Columns: register.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedUserIDs(); len(nodes) > 0 && !ru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   register.UserTable,
			Columns: register.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   register.UserTable,
			Columns: register.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.ScholarshipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   register.ScholarshipTable,
			Columns: register.ScholarshipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarship.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedScholarshipIDs(); len(nodes) > 0 && !ru.mutation.ScholarshipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   register.ScholarshipTable,
			Columns: register.ScholarshipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.ScholarshipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   register.ScholarshipTable,
			Columns: register.ScholarshipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.AchievementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.AchievementTable,
			Columns: register.AchievementPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: achievement.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedAchievementIDs(); len(nodes) > 0 && !ru.mutation.AchievementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.AchievementTable,
			Columns: register.AchievementPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: achievement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.AchievementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.AchievementTable,
			Columns: register.AchievementPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: achievement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.BiodataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.BiodataTable,
			Columns: register.BiodataPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: biodata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedBiodataIDs(); len(nodes) > 0 && !ru.mutation.BiodataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.BiodataTable,
			Columns: register.BiodataPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: biodata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.BiodataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.BiodataTable,
			Columns: register.BiodataPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: biodata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.EducationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.EducationTable,
			Columns: register.EducationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: education.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedEducationIDs(); len(nodes) > 0 && !ru.mutation.EducationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.EducationTable,
			Columns: register.EducationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: education.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.EducationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.EducationTable,
			Columns: register.EducationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: education.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.FamilyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.FamilyTable,
			Columns: register.FamilyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: family.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedFamilyIDs(); len(nodes) > 0 && !ru.mutation.FamilyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.FamilyTable,
			Columns: register.FamilyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: family.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.FamilyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.FamilyTable,
			Columns: register.FamilyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: family.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ru.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.LanguageTable,
			Columns: register.LanguagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: language.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedLanguageIDs(); len(nodes) > 0 && !ru.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.LanguageTable,
			Columns: register.LanguagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: language.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.LanguageTable,
			Columns: register.LanguagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: language.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{register.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// RegisterUpdateOne is the builder for updating a single Register entity.
type RegisterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RegisterMutation
}

// SetStatusOne sets the "statusOne" field.
func (ruo *RegisterUpdateOne) SetStatusOne(i int) *RegisterUpdateOne {
	ruo.mutation.ResetStatusOne()
	ruo.mutation.SetStatusOne(i)
	return ruo
}

// AddStatusOne adds i to the "statusOne" field.
func (ruo *RegisterUpdateOne) AddStatusOne(i int) *RegisterUpdateOne {
	ruo.mutation.AddStatusOne(i)
	return ruo
}

// SetStatusTwo sets the "statusTwo" field.
func (ruo *RegisterUpdateOne) SetStatusTwo(i int) *RegisterUpdateOne {
	ruo.mutation.ResetStatusTwo()
	ruo.mutation.SetStatusTwo(i)
	return ruo
}

// SetNillableStatusTwo sets the "statusTwo" field if the given value is not nil.
func (ruo *RegisterUpdateOne) SetNillableStatusTwo(i *int) *RegisterUpdateOne {
	if i != nil {
		ruo.SetStatusTwo(*i)
	}
	return ruo
}

// AddStatusTwo adds i to the "statusTwo" field.
func (ruo *RegisterUpdateOne) AddStatusTwo(i int) *RegisterUpdateOne {
	ruo.mutation.AddStatusTwo(i)
	return ruo
}

// SetOnlineInterview sets the "onlineInterview" field.
func (ruo *RegisterUpdateOne) SetOnlineInterview(s string) *RegisterUpdateOne {
	ruo.mutation.SetOnlineInterview(s)
	return ruo
}

// SetNillableOnlineInterview sets the "onlineInterview" field if the given value is not nil.
func (ruo *RegisterUpdateOne) SetNillableOnlineInterview(s *string) *RegisterUpdateOne {
	if s != nil {
		ruo.SetOnlineInterview(*s)
	}
	return ruo
}

// ClearOnlineInterview clears the value of the "onlineInterview" field.
func (ruo *RegisterUpdateOne) ClearOnlineInterview() *RegisterUpdateOne {
	ruo.mutation.ClearOnlineInterview()
	return ruo
}

// SetInterviewTime sets the "interviewTime" field.
func (ruo *RegisterUpdateOne) SetInterviewTime(t time.Time) *RegisterUpdateOne {
	ruo.mutation.SetInterviewTime(t)
	return ruo
}

// SetNillableInterviewTime sets the "interviewTime" field if the given value is not nil.
func (ruo *RegisterUpdateOne) SetNillableInterviewTime(t *time.Time) *RegisterUpdateOne {
	if t != nil {
		ruo.SetInterviewTime(*t)
	}
	return ruo
}

// ClearInterviewTime clears the value of the "interviewTime" field.
func (ruo *RegisterUpdateOne) ClearInterviewTime() *RegisterUpdateOne {
	ruo.mutation.ClearInterviewTime()
	return ruo
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (ruo *RegisterUpdateOne) AddUserIDs(ids ...int) *RegisterUpdateOne {
	ruo.mutation.AddUserIDs(ids...)
	return ruo
}

// AddUser adds the "user" edges to the User entity.
func (ruo *RegisterUpdateOne) AddUser(u ...*User) *RegisterUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ruo.AddUserIDs(ids...)
}

// AddScholarshipIDs adds the "scholarship" edge to the Scholarship entity by IDs.
func (ruo *RegisterUpdateOne) AddScholarshipIDs(ids ...int) *RegisterUpdateOne {
	ruo.mutation.AddScholarshipIDs(ids...)
	return ruo
}

// AddScholarship adds the "scholarship" edges to the Scholarship entity.
func (ruo *RegisterUpdateOne) AddScholarship(s ...*Scholarship) *RegisterUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.AddScholarshipIDs(ids...)
}

// AddAchievementIDs adds the "achievement" edge to the Achievement entity by IDs.
func (ruo *RegisterUpdateOne) AddAchievementIDs(ids ...int) *RegisterUpdateOne {
	ruo.mutation.AddAchievementIDs(ids...)
	return ruo
}

// AddAchievement adds the "achievement" edges to the Achievement entity.
func (ruo *RegisterUpdateOne) AddAchievement(a ...*Achievement) *RegisterUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.AddAchievementIDs(ids...)
}

// AddBiodatumIDs adds the "biodata" edge to the Biodata entity by IDs.
func (ruo *RegisterUpdateOne) AddBiodatumIDs(ids ...int) *RegisterUpdateOne {
	ruo.mutation.AddBiodatumIDs(ids...)
	return ruo
}

// AddBiodata adds the "biodata" edges to the Biodata entity.
func (ruo *RegisterUpdateOne) AddBiodata(b ...*Biodata) *RegisterUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ruo.AddBiodatumIDs(ids...)
}

// AddEducationIDs adds the "education" edge to the Education entity by IDs.
func (ruo *RegisterUpdateOne) AddEducationIDs(ids ...int) *RegisterUpdateOne {
	ruo.mutation.AddEducationIDs(ids...)
	return ruo
}

// AddEducation adds the "education" edges to the Education entity.
func (ruo *RegisterUpdateOne) AddEducation(e ...*Education) *RegisterUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ruo.AddEducationIDs(ids...)
}

// AddFamilyIDs adds the "family" edge to the Family entity by IDs.
func (ruo *RegisterUpdateOne) AddFamilyIDs(ids ...int) *RegisterUpdateOne {
	ruo.mutation.AddFamilyIDs(ids...)
	return ruo
}

// AddFamily adds the "family" edges to the Family entity.
func (ruo *RegisterUpdateOne) AddFamily(f ...*Family) *RegisterUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ruo.AddFamilyIDs(ids...)
}

// AddLanguageIDs adds the "language" edge to the Language entity by IDs.
func (ruo *RegisterUpdateOne) AddLanguageIDs(ids ...int) *RegisterUpdateOne {
	ruo.mutation.AddLanguageIDs(ids...)
	return ruo
}

// AddLanguage adds the "language" edges to the Language entity.
func (ruo *RegisterUpdateOne) AddLanguage(l ...*Language) *RegisterUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ruo.AddLanguageIDs(ids...)
}

// Mutation returns the RegisterMutation object of the builder.
func (ruo *RegisterUpdateOne) Mutation() *RegisterMutation {
	return ruo.mutation
}

// ClearUser clears all "user" edges to the User entity.
func (ruo *RegisterUpdateOne) ClearUser() *RegisterUpdateOne {
	ruo.mutation.ClearUser()
	return ruo
}

// RemoveUserIDs removes the "user" edge to User entities by IDs.
func (ruo *RegisterUpdateOne) RemoveUserIDs(ids ...int) *RegisterUpdateOne {
	ruo.mutation.RemoveUserIDs(ids...)
	return ruo
}

// RemoveUser removes "user" edges to User entities.
func (ruo *RegisterUpdateOne) RemoveUser(u ...*User) *RegisterUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return ruo.RemoveUserIDs(ids...)
}

// ClearScholarship clears all "scholarship" edges to the Scholarship entity.
func (ruo *RegisterUpdateOne) ClearScholarship() *RegisterUpdateOne {
	ruo.mutation.ClearScholarship()
	return ruo
}

// RemoveScholarshipIDs removes the "scholarship" edge to Scholarship entities by IDs.
func (ruo *RegisterUpdateOne) RemoveScholarshipIDs(ids ...int) *RegisterUpdateOne {
	ruo.mutation.RemoveScholarshipIDs(ids...)
	return ruo
}

// RemoveScholarship removes "scholarship" edges to Scholarship entities.
func (ruo *RegisterUpdateOne) RemoveScholarship(s ...*Scholarship) *RegisterUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return ruo.RemoveScholarshipIDs(ids...)
}

// ClearAchievement clears all "achievement" edges to the Achievement entity.
func (ruo *RegisterUpdateOne) ClearAchievement() *RegisterUpdateOne {
	ruo.mutation.ClearAchievement()
	return ruo
}

// RemoveAchievementIDs removes the "achievement" edge to Achievement entities by IDs.
func (ruo *RegisterUpdateOne) RemoveAchievementIDs(ids ...int) *RegisterUpdateOne {
	ruo.mutation.RemoveAchievementIDs(ids...)
	return ruo
}

// RemoveAchievement removes "achievement" edges to Achievement entities.
func (ruo *RegisterUpdateOne) RemoveAchievement(a ...*Achievement) *RegisterUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ruo.RemoveAchievementIDs(ids...)
}

// ClearBiodata clears all "biodata" edges to the Biodata entity.
func (ruo *RegisterUpdateOne) ClearBiodata() *RegisterUpdateOne {
	ruo.mutation.ClearBiodata()
	return ruo
}

// RemoveBiodatumIDs removes the "biodata" edge to Biodata entities by IDs.
func (ruo *RegisterUpdateOne) RemoveBiodatumIDs(ids ...int) *RegisterUpdateOne {
	ruo.mutation.RemoveBiodatumIDs(ids...)
	return ruo
}

// RemoveBiodata removes "biodata" edges to Biodata entities.
func (ruo *RegisterUpdateOne) RemoveBiodata(b ...*Biodata) *RegisterUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return ruo.RemoveBiodatumIDs(ids...)
}

// ClearEducation clears all "education" edges to the Education entity.
func (ruo *RegisterUpdateOne) ClearEducation() *RegisterUpdateOne {
	ruo.mutation.ClearEducation()
	return ruo
}

// RemoveEducationIDs removes the "education" edge to Education entities by IDs.
func (ruo *RegisterUpdateOne) RemoveEducationIDs(ids ...int) *RegisterUpdateOne {
	ruo.mutation.RemoveEducationIDs(ids...)
	return ruo
}

// RemoveEducation removes "education" edges to Education entities.
func (ruo *RegisterUpdateOne) RemoveEducation(e ...*Education) *RegisterUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return ruo.RemoveEducationIDs(ids...)
}

// ClearFamily clears all "family" edges to the Family entity.
func (ruo *RegisterUpdateOne) ClearFamily() *RegisterUpdateOne {
	ruo.mutation.ClearFamily()
	return ruo
}

// RemoveFamilyIDs removes the "family" edge to Family entities by IDs.
func (ruo *RegisterUpdateOne) RemoveFamilyIDs(ids ...int) *RegisterUpdateOne {
	ruo.mutation.RemoveFamilyIDs(ids...)
	return ruo
}

// RemoveFamily removes "family" edges to Family entities.
func (ruo *RegisterUpdateOne) RemoveFamily(f ...*Family) *RegisterUpdateOne {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return ruo.RemoveFamilyIDs(ids...)
}

// ClearLanguage clears all "language" edges to the Language entity.
func (ruo *RegisterUpdateOne) ClearLanguage() *RegisterUpdateOne {
	ruo.mutation.ClearLanguage()
	return ruo
}

// RemoveLanguageIDs removes the "language" edge to Language entities by IDs.
func (ruo *RegisterUpdateOne) RemoveLanguageIDs(ids ...int) *RegisterUpdateOne {
	ruo.mutation.RemoveLanguageIDs(ids...)
	return ruo
}

// RemoveLanguage removes "language" edges to Language entities.
func (ruo *RegisterUpdateOne) RemoveLanguage(l ...*Language) *RegisterUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return ruo.RemoveLanguageIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RegisterUpdateOne) Select(field string, fields ...string) *RegisterUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Register entity.
func (ruo *RegisterUpdateOne) Save(ctx context.Context) (*Register, error) {
	var (
		err  error
		node *Register
	)
	if len(ruo.hooks) == 0 {
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RegisterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			if ruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RegisterUpdateOne) SaveX(ctx context.Context) *Register {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RegisterUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RegisterUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (ruo *RegisterUpdateOne) sqlSave(ctx context.Context) (_node *Register, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   register.Table,
			Columns: register.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: register.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Register.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, register.FieldID)
		for _, f := range fields {
			if !register.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != register.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.StatusOne(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: register.FieldStatusOne,
		})
	}
	if value, ok := ruo.mutation.AddedStatusOne(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: register.FieldStatusOne,
		})
	}
	if value, ok := ruo.mutation.StatusTwo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: register.FieldStatusTwo,
		})
	}
	if value, ok := ruo.mutation.AddedStatusTwo(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: register.FieldStatusTwo,
		})
	}
	if value, ok := ruo.mutation.OnlineInterview(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: register.FieldOnlineInterview,
		})
	}
	if ruo.mutation.OnlineInterviewCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: register.FieldOnlineInterview,
		})
	}
	if value, ok := ruo.mutation.InterviewTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: register.FieldInterviewTime,
		})
	}
	if ruo.mutation.InterviewTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: register.FieldInterviewTime,
		})
	}
	if ruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   register.UserTable,
			Columns: register.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedUserIDs(); len(nodes) > 0 && !ruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   register.UserTable,
			Columns: register.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   register.UserTable,
			Columns: register.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.ScholarshipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   register.ScholarshipTable,
			Columns: register.ScholarshipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarship.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedScholarshipIDs(); len(nodes) > 0 && !ruo.mutation.ScholarshipCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   register.ScholarshipTable,
			Columns: register.ScholarshipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.ScholarshipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   register.ScholarshipTable,
			Columns: register.ScholarshipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.AchievementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.AchievementTable,
			Columns: register.AchievementPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: achievement.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedAchievementIDs(); len(nodes) > 0 && !ruo.mutation.AchievementCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.AchievementTable,
			Columns: register.AchievementPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: achievement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.AchievementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.AchievementTable,
			Columns: register.AchievementPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: achievement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.BiodataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.BiodataTable,
			Columns: register.BiodataPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: biodata.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedBiodataIDs(); len(nodes) > 0 && !ruo.mutation.BiodataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.BiodataTable,
			Columns: register.BiodataPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: biodata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.BiodataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.BiodataTable,
			Columns: register.BiodataPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: biodata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.EducationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.EducationTable,
			Columns: register.EducationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: education.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedEducationIDs(); len(nodes) > 0 && !ruo.mutation.EducationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.EducationTable,
			Columns: register.EducationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: education.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.EducationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.EducationTable,
			Columns: register.EducationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: education.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.FamilyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.FamilyTable,
			Columns: register.FamilyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: family.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedFamilyIDs(); len(nodes) > 0 && !ruo.mutation.FamilyCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.FamilyTable,
			Columns: register.FamilyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: family.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.FamilyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.FamilyTable,
			Columns: register.FamilyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: family.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ruo.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.LanguageTable,
			Columns: register.LanguagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: language.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedLanguageIDs(); len(nodes) > 0 && !ruo.mutation.LanguageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.LanguageTable,
			Columns: register.LanguagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: language.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.LanguageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.LanguageTable,
			Columns: register.LanguagePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: language.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Register{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{register.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
