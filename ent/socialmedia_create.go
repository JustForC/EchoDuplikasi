// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Kynesia/ent/register"
	"Kynesia/ent/socialmedia"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SocialMediaCreate is the builder for creating a SocialMedia entity.
type SocialMediaCreate struct {
	config
	mutation *SocialMediaMutation
	hooks    []Hook
}

// SetInstagram sets the "instagram" field.
func (smc *SocialMediaCreate) SetInstagram(s string) *SocialMediaCreate {
	smc.mutation.SetInstagram(s)
	return smc
}

// SetFacebook sets the "facebook" field.
func (smc *SocialMediaCreate) SetFacebook(s string) *SocialMediaCreate {
	smc.mutation.SetFacebook(s)
	return smc
}

// SetTiktok sets the "tiktok" field.
func (smc *SocialMediaCreate) SetTiktok(s string) *SocialMediaCreate {
	smc.mutation.SetTiktok(s)
	return smc
}

// SetTwitter sets the "twitter" field.
func (smc *SocialMediaCreate) SetTwitter(s string) *SocialMediaCreate {
	smc.mutation.SetTwitter(s)
	return smc
}

// AddRegisterIDs adds the "register" edge to the Register entity by IDs.
func (smc *SocialMediaCreate) AddRegisterIDs(ids ...int) *SocialMediaCreate {
	smc.mutation.AddRegisterIDs(ids...)
	return smc
}

// AddRegister adds the "register" edges to the Register entity.
func (smc *SocialMediaCreate) AddRegister(r ...*Register) *SocialMediaCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return smc.AddRegisterIDs(ids...)
}

// Mutation returns the SocialMediaMutation object of the builder.
func (smc *SocialMediaCreate) Mutation() *SocialMediaMutation {
	return smc.mutation
}

// Save creates the SocialMedia in the database.
func (smc *SocialMediaCreate) Save(ctx context.Context) (*SocialMedia, error) {
	var (
		err  error
		node *SocialMedia
	)
	if len(smc.hooks) == 0 {
		if err = smc.check(); err != nil {
			return nil, err
		}
		node, err = smc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SocialMediaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = smc.check(); err != nil {
				return nil, err
			}
			smc.mutation = mutation
			if node, err = smc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(smc.hooks) - 1; i >= 0; i-- {
			if smc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = smc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, smc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (smc *SocialMediaCreate) SaveX(ctx context.Context) *SocialMedia {
	v, err := smc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smc *SocialMediaCreate) Exec(ctx context.Context) error {
	_, err := smc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smc *SocialMediaCreate) ExecX(ctx context.Context) {
	if err := smc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (smc *SocialMediaCreate) check() error {
	if _, ok := smc.mutation.Instagram(); !ok {
		return &ValidationError{Name: "instagram", err: errors.New(`ent: missing required field "SocialMedia.instagram"`)}
	}
	if _, ok := smc.mutation.Facebook(); !ok {
		return &ValidationError{Name: "facebook", err: errors.New(`ent: missing required field "SocialMedia.facebook"`)}
	}
	if _, ok := smc.mutation.Tiktok(); !ok {
		return &ValidationError{Name: "tiktok", err: errors.New(`ent: missing required field "SocialMedia.tiktok"`)}
	}
	if _, ok := smc.mutation.Twitter(); !ok {
		return &ValidationError{Name: "twitter", err: errors.New(`ent: missing required field "SocialMedia.twitter"`)}
	}
	return nil
}

func (smc *SocialMediaCreate) sqlSave(ctx context.Context) (*SocialMedia, error) {
	_node, _spec := smc.createSpec()
	if err := sqlgraph.CreateNode(ctx, smc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (smc *SocialMediaCreate) createSpec() (*SocialMedia, *sqlgraph.CreateSpec) {
	var (
		_node = &SocialMedia{config: smc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: socialmedia.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: socialmedia.FieldID,
			},
		}
	)
	if value, ok := smc.mutation.Instagram(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialmedia.FieldInstagram,
		})
		_node.Instagram = value
	}
	if value, ok := smc.mutation.Facebook(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialmedia.FieldFacebook,
		})
		_node.Facebook = value
	}
	if value, ok := smc.mutation.Tiktok(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialmedia.FieldTiktok,
		})
		_node.Tiktok = value
	}
	if value, ok := smc.mutation.Twitter(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: socialmedia.FieldTwitter,
		})
		_node.Twitter = value
	}
	if nodes := smc.mutation.RegisterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   socialmedia.RegisterTable,
			Columns: socialmedia.RegisterPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: register.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SocialMediaCreateBulk is the builder for creating many SocialMedia entities in bulk.
type SocialMediaCreateBulk struct {
	config
	builders []*SocialMediaCreate
}

// Save creates the SocialMedia entities in the database.
func (smcb *SocialMediaCreateBulk) Save(ctx context.Context) ([]*SocialMedia, error) {
	specs := make([]*sqlgraph.CreateSpec, len(smcb.builders))
	nodes := make([]*SocialMedia, len(smcb.builders))
	mutators := make([]Mutator, len(smcb.builders))
	for i := range smcb.builders {
		func(i int, root context.Context) {
			builder := smcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SocialMediaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, smcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, smcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, smcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (smcb *SocialMediaCreateBulk) SaveX(ctx context.Context) []*SocialMedia {
	v, err := smcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (smcb *SocialMediaCreateBulk) Exec(ctx context.Context) error {
	_, err := smcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (smcb *SocialMediaCreateBulk) ExecX(ctx context.Context) {
	if err := smcb.Exec(ctx); err != nil {
		panic(err)
	}
}
