// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Kynesia/ent/family"
	"Kynesia/ent/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FamilyUpdate is the builder for updating Family entities.
type FamilyUpdate struct {
	config
	hooks    []Hook
	mutation *FamilyMutation
}

// Where appends a list predicates to the FamilyUpdate builder.
func (fu *FamilyUpdate) Where(ps ...predicate.Family) *FamilyUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetStatus sets the "status" field.
func (fu *FamilyUpdate) SetStatus(s string) *FamilyUpdate {
	fu.mutation.SetStatus(s)
	return fu
}

// SetName sets the "name" field.
func (fu *FamilyUpdate) SetName(s string) *FamilyUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetGender sets the "gender" field.
func (fu *FamilyUpdate) SetGender(s string) *FamilyUpdate {
	fu.mutation.SetGender(s)
	return fu
}

// SetBirthplace sets the "birthplace" field.
func (fu *FamilyUpdate) SetBirthplace(s string) *FamilyUpdate {
	fu.mutation.SetBirthplace(s)
	return fu
}

// SetBirthdate sets the "birthdate" field.
func (fu *FamilyUpdate) SetBirthdate(t time.Time) *FamilyUpdate {
	fu.mutation.SetBirthdate(t)
	return fu
}

// SetEducation sets the "education" field.
func (fu *FamilyUpdate) SetEducation(s string) *FamilyUpdate {
	fu.mutation.SetEducation(s)
	return fu
}

// SetJob sets the "job" field.
func (fu *FamilyUpdate) SetJob(s string) *FamilyUpdate {
	fu.mutation.SetJob(s)
	return fu
}

// SetNillableJob sets the "job" field if the given value is not nil.
func (fu *FamilyUpdate) SetNillableJob(s *string) *FamilyUpdate {
	if s != nil {
		fu.SetJob(*s)
	}
	return fu
}

// Mutation returns the FamilyMutation object of the builder.
func (fu *FamilyUpdate) Mutation() *FamilyMutation {
	return fu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FamilyUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fu.hooks) == 0 {
		affected, err = fu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FamilyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fu.mutation = mutation
			affected, err = fu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fu.hooks) - 1; i >= 0; i-- {
			if fu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FamilyUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FamilyUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FamilyUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fu *FamilyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   family.Table,
			Columns: family.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: family.FieldID,
			},
		},
	}
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: family.FieldStatus,
		})
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: family.FieldName,
		})
	}
	if value, ok := fu.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: family.FieldGender,
		})
	}
	if value, ok := fu.mutation.Birthplace(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: family.FieldBirthplace,
		})
	}
	if value, ok := fu.mutation.Birthdate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: family.FieldBirthdate,
		})
	}
	if value, ok := fu.mutation.Education(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: family.FieldEducation,
		})
	}
	if value, ok := fu.mutation.Job(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: family.FieldJob,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{family.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// FamilyUpdateOne is the builder for updating a single Family entity.
type FamilyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FamilyMutation
}

// SetStatus sets the "status" field.
func (fuo *FamilyUpdateOne) SetStatus(s string) *FamilyUpdateOne {
	fuo.mutation.SetStatus(s)
	return fuo
}

// SetName sets the "name" field.
func (fuo *FamilyUpdateOne) SetName(s string) *FamilyUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetGender sets the "gender" field.
func (fuo *FamilyUpdateOne) SetGender(s string) *FamilyUpdateOne {
	fuo.mutation.SetGender(s)
	return fuo
}

// SetBirthplace sets the "birthplace" field.
func (fuo *FamilyUpdateOne) SetBirthplace(s string) *FamilyUpdateOne {
	fuo.mutation.SetBirthplace(s)
	return fuo
}

// SetBirthdate sets the "birthdate" field.
func (fuo *FamilyUpdateOne) SetBirthdate(t time.Time) *FamilyUpdateOne {
	fuo.mutation.SetBirthdate(t)
	return fuo
}

// SetEducation sets the "education" field.
func (fuo *FamilyUpdateOne) SetEducation(s string) *FamilyUpdateOne {
	fuo.mutation.SetEducation(s)
	return fuo
}

// SetJob sets the "job" field.
func (fuo *FamilyUpdateOne) SetJob(s string) *FamilyUpdateOne {
	fuo.mutation.SetJob(s)
	return fuo
}

// SetNillableJob sets the "job" field if the given value is not nil.
func (fuo *FamilyUpdateOne) SetNillableJob(s *string) *FamilyUpdateOne {
	if s != nil {
		fuo.SetJob(*s)
	}
	return fuo
}

// Mutation returns the FamilyMutation object of the builder.
func (fuo *FamilyUpdateOne) Mutation() *FamilyMutation {
	return fuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FamilyUpdateOne) Select(field string, fields ...string) *FamilyUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Family entity.
func (fuo *FamilyUpdateOne) Save(ctx context.Context) (*Family, error) {
	var (
		err  error
		node *Family
	)
	if len(fuo.hooks) == 0 {
		node, err = fuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FamilyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fuo.mutation = mutation
			node, err = fuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fuo.hooks) - 1; i >= 0; i-- {
			if fuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FamilyUpdateOne) SaveX(ctx context.Context) *Family {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FamilyUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FamilyUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fuo *FamilyUpdateOne) sqlSave(ctx context.Context) (_node *Family, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   family.Table,
			Columns: family.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: family.FieldID,
			},
		},
	}
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Family.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, family.FieldID)
		for _, f := range fields {
			if !family.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != family.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: family.FieldStatus,
		})
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: family.FieldName,
		})
	}
	if value, ok := fuo.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: family.FieldGender,
		})
	}
	if value, ok := fuo.mutation.Birthplace(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: family.FieldBirthplace,
		})
	}
	if value, ok := fuo.mutation.Birthdate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: family.FieldBirthdate,
		})
	}
	if value, ok := fuo.mutation.Education(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: family.FieldEducation,
		})
	}
	if value, ok := fuo.mutation.Job(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: family.FieldJob,
		})
	}
	_node = &Family{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{family.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
