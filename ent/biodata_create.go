// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Kynesia/ent/biodata"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BiodataCreate is the builder for creating a Biodata entity.
type BiodataCreate struct {
	config
	mutation *BiodataMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (bc *BiodataCreate) SetName(s string) *BiodataCreate {
	bc.mutation.SetName(s)
	return bc
}

// SetNickname sets the "nickname" field.
func (bc *BiodataCreate) SetNickname(s string) *BiodataCreate {
	bc.mutation.SetNickname(s)
	return bc
}

// SetGender sets the "gender" field.
func (bc *BiodataCreate) SetGender(s string) *BiodataCreate {
	bc.mutation.SetGender(s)
	return bc
}

// SetBirthplace sets the "birthplace" field.
func (bc *BiodataCreate) SetBirthplace(s string) *BiodataCreate {
	bc.mutation.SetBirthplace(s)
	return bc
}

// SetBirthdate sets the "birthdate" field.
func (bc *BiodataCreate) SetBirthdate(t time.Time) *BiodataCreate {
	bc.mutation.SetBirthdate(t)
	return bc
}

// SetTelephone sets the "telephone" field.
func (bc *BiodataCreate) SetTelephone(s string) *BiodataCreate {
	bc.mutation.SetTelephone(s)
	return bc
}

// SetEmail sets the "email" field.
func (bc *BiodataCreate) SetEmail(s string) *BiodataCreate {
	bc.mutation.SetEmail(s)
	return bc
}

// SetIdType sets the "idType" field.
func (bc *BiodataCreate) SetIdType(s string) *BiodataCreate {
	bc.mutation.SetIdType(s)
	return bc
}

// SetIdNumber sets the "idNumber" field.
func (bc *BiodataCreate) SetIdNumber(s string) *BiodataCreate {
	bc.mutation.SetIdNumber(s)
	return bc
}

// SetAddressID sets the "addressID" field.
func (bc *BiodataCreate) SetAddressID(s string) *BiodataCreate {
	bc.mutation.SetAddressID(s)
	return bc
}

// SetPostCodeID sets the "postCodeID" field.
func (bc *BiodataCreate) SetPostCodeID(s string) *BiodataCreate {
	bc.mutation.SetPostCodeID(s)
	return bc
}

// SetDistrictID sets the "districtID" field.
func (bc *BiodataCreate) SetDistrictID(s string) *BiodataCreate {
	bc.mutation.SetDistrictID(s)
	return bc
}

// SetCityID sets the "cityID" field.
func (bc *BiodataCreate) SetCityID(s string) *BiodataCreate {
	bc.mutation.SetCityID(s)
	return bc
}

// SetProvinceID sets the "provinceID" field.
func (bc *BiodataCreate) SetProvinceID(s string) *BiodataCreate {
	bc.mutation.SetProvinceID(s)
	return bc
}

// SetAddressLiving sets the "addressLiving" field.
func (bc *BiodataCreate) SetAddressLiving(s string) *BiodataCreate {
	bc.mutation.SetAddressLiving(s)
	return bc
}

// SetPostCodeLiving sets the "postCodeLiving" field.
func (bc *BiodataCreate) SetPostCodeLiving(s string) *BiodataCreate {
	bc.mutation.SetPostCodeLiving(s)
	return bc
}

// SetDistrictLiving sets the "districtLiving" field.
func (bc *BiodataCreate) SetDistrictLiving(s string) *BiodataCreate {
	bc.mutation.SetDistrictLiving(s)
	return bc
}

// SetCityLiving sets the "cityLiving" field.
func (bc *BiodataCreate) SetCityLiving(s string) *BiodataCreate {
	bc.mutation.SetCityLiving(s)
	return bc
}

// SetProvinceLiving sets the "provinceLiving" field.
func (bc *BiodataCreate) SetProvinceLiving(s string) *BiodataCreate {
	bc.mutation.SetProvinceLiving(s)
	return bc
}

// SetEntrance sets the "entrance" field.
func (bc *BiodataCreate) SetEntrance(s string) *BiodataCreate {
	bc.mutation.SetEntrance(s)
	return bc
}

// SetEntranceNumber sets the "entranceNumber" field.
func (bc *BiodataCreate) SetEntranceNumber(s string) *BiodataCreate {
	bc.mutation.SetEntranceNumber(s)
	return bc
}

// SetMajor sets the "major" field.
func (bc *BiodataCreate) SetMajor(s string) *BiodataCreate {
	bc.mutation.SetMajor(s)
	return bc
}

// SetUniversity sets the "university" field.
func (bc *BiodataCreate) SetUniversity(s string) *BiodataCreate {
	bc.mutation.SetUniversity(s)
	return bc
}

// Mutation returns the BiodataMutation object of the builder.
func (bc *BiodataCreate) Mutation() *BiodataMutation {
	return bc.mutation
}

// Save creates the Biodata in the database.
func (bc *BiodataCreate) Save(ctx context.Context) (*Biodata, error) {
	var (
		err  error
		node *Biodata
	)
	if len(bc.hooks) == 0 {
		if err = bc.check(); err != nil {
			return nil, err
		}
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BiodataMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bc.check(); err != nil {
				return nil, err
			}
			bc.mutation = mutation
			if node, err = bc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			if bc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, bc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BiodataCreate) SaveX(ctx context.Context) *Biodata {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BiodataCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BiodataCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BiodataCreate) check() error {
	if _, ok := bc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Biodata.name"`)}
	}
	if _, ok := bc.mutation.Nickname(); !ok {
		return &ValidationError{Name: "nickname", err: errors.New(`ent: missing required field "Biodata.nickname"`)}
	}
	if _, ok := bc.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "Biodata.gender"`)}
	}
	if _, ok := bc.mutation.Birthplace(); !ok {
		return &ValidationError{Name: "birthplace", err: errors.New(`ent: missing required field "Biodata.birthplace"`)}
	}
	if _, ok := bc.mutation.Birthdate(); !ok {
		return &ValidationError{Name: "birthdate", err: errors.New(`ent: missing required field "Biodata.birthdate"`)}
	}
	if _, ok := bc.mutation.Telephone(); !ok {
		return &ValidationError{Name: "telephone", err: errors.New(`ent: missing required field "Biodata.telephone"`)}
	}
	if _, ok := bc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "Biodata.email"`)}
	}
	if _, ok := bc.mutation.IdType(); !ok {
		return &ValidationError{Name: "idType", err: errors.New(`ent: missing required field "Biodata.idType"`)}
	}
	if _, ok := bc.mutation.IdNumber(); !ok {
		return &ValidationError{Name: "idNumber", err: errors.New(`ent: missing required field "Biodata.idNumber"`)}
	}
	if _, ok := bc.mutation.AddressID(); !ok {
		return &ValidationError{Name: "addressID", err: errors.New(`ent: missing required field "Biodata.addressID"`)}
	}
	if _, ok := bc.mutation.PostCodeID(); !ok {
		return &ValidationError{Name: "postCodeID", err: errors.New(`ent: missing required field "Biodata.postCodeID"`)}
	}
	if _, ok := bc.mutation.DistrictID(); !ok {
		return &ValidationError{Name: "districtID", err: errors.New(`ent: missing required field "Biodata.districtID"`)}
	}
	if _, ok := bc.mutation.CityID(); !ok {
		return &ValidationError{Name: "cityID", err: errors.New(`ent: missing required field "Biodata.cityID"`)}
	}
	if _, ok := bc.mutation.ProvinceID(); !ok {
		return &ValidationError{Name: "provinceID", err: errors.New(`ent: missing required field "Biodata.provinceID"`)}
	}
	if _, ok := bc.mutation.AddressLiving(); !ok {
		return &ValidationError{Name: "addressLiving", err: errors.New(`ent: missing required field "Biodata.addressLiving"`)}
	}
	if _, ok := bc.mutation.PostCodeLiving(); !ok {
		return &ValidationError{Name: "postCodeLiving", err: errors.New(`ent: missing required field "Biodata.postCodeLiving"`)}
	}
	if _, ok := bc.mutation.DistrictLiving(); !ok {
		return &ValidationError{Name: "districtLiving", err: errors.New(`ent: missing required field "Biodata.districtLiving"`)}
	}
	if _, ok := bc.mutation.CityLiving(); !ok {
		return &ValidationError{Name: "cityLiving", err: errors.New(`ent: missing required field "Biodata.cityLiving"`)}
	}
	if _, ok := bc.mutation.ProvinceLiving(); !ok {
		return &ValidationError{Name: "provinceLiving", err: errors.New(`ent: missing required field "Biodata.provinceLiving"`)}
	}
	if _, ok := bc.mutation.Entrance(); !ok {
		return &ValidationError{Name: "entrance", err: errors.New(`ent: missing required field "Biodata.entrance"`)}
	}
	if _, ok := bc.mutation.EntranceNumber(); !ok {
		return &ValidationError{Name: "entranceNumber", err: errors.New(`ent: missing required field "Biodata.entranceNumber"`)}
	}
	if _, ok := bc.mutation.Major(); !ok {
		return &ValidationError{Name: "major", err: errors.New(`ent: missing required field "Biodata.major"`)}
	}
	if _, ok := bc.mutation.University(); !ok {
		return &ValidationError{Name: "university", err: errors.New(`ent: missing required field "Biodata.university"`)}
	}
	return nil
}

func (bc *BiodataCreate) sqlSave(ctx context.Context) (*Biodata, error) {
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (bc *BiodataCreate) createSpec() (*Biodata, *sqlgraph.CreateSpec) {
	var (
		_node = &Biodata{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: biodata.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: biodata.FieldID,
			},
		}
	)
	if value, ok := bc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: biodata.FieldName,
		})
		_node.Name = value
	}
	if value, ok := bc.mutation.Nickname(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: biodata.FieldNickname,
		})
		_node.Nickname = value
	}
	if value, ok := bc.mutation.Gender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: biodata.FieldGender,
		})
		_node.Gender = value
	}
	if value, ok := bc.mutation.Birthplace(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: biodata.FieldBirthplace,
		})
		_node.Birthplace = value
	}
	if value, ok := bc.mutation.Birthdate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: biodata.FieldBirthdate,
		})
		_node.Birthdate = value
	}
	if value, ok := bc.mutation.Telephone(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: biodata.FieldTelephone,
		})
		_node.Telephone = value
	}
	if value, ok := bc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: biodata.FieldEmail,
		})
		_node.Email = value
	}
	if value, ok := bc.mutation.IdType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: biodata.FieldIdType,
		})
		_node.IdType = value
	}
	if value, ok := bc.mutation.IdNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: biodata.FieldIdNumber,
		})
		_node.IdNumber = value
	}
	if value, ok := bc.mutation.AddressID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: biodata.FieldAddressID,
		})
		_node.AddressID = value
	}
	if value, ok := bc.mutation.PostCodeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: biodata.FieldPostCodeID,
		})
		_node.PostCodeID = value
	}
	if value, ok := bc.mutation.DistrictID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: biodata.FieldDistrictID,
		})
		_node.DistrictID = value
	}
	if value, ok := bc.mutation.CityID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: biodata.FieldCityID,
		})
		_node.CityID = value
	}
	if value, ok := bc.mutation.ProvinceID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: biodata.FieldProvinceID,
		})
		_node.ProvinceID = value
	}
	if value, ok := bc.mutation.AddressLiving(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: biodata.FieldAddressLiving,
		})
		_node.AddressLiving = value
	}
	if value, ok := bc.mutation.PostCodeLiving(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: biodata.FieldPostCodeLiving,
		})
		_node.PostCodeLiving = value
	}
	if value, ok := bc.mutation.DistrictLiving(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: biodata.FieldDistrictLiving,
		})
		_node.DistrictLiving = value
	}
	if value, ok := bc.mutation.CityLiving(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: biodata.FieldCityLiving,
		})
		_node.CityLiving = value
	}
	if value, ok := bc.mutation.ProvinceLiving(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: biodata.FieldProvinceLiving,
		})
		_node.ProvinceLiving = value
	}
	if value, ok := bc.mutation.Entrance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: biodata.FieldEntrance,
		})
		_node.Entrance = value
	}
	if value, ok := bc.mutation.EntranceNumber(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: biodata.FieldEntranceNumber,
		})
		_node.EntranceNumber = value
	}
	if value, ok := bc.mutation.Major(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: biodata.FieldMajor,
		})
		_node.Major = value
	}
	if value, ok := bc.mutation.University(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: biodata.FieldUniversity,
		})
		_node.University = value
	}
	return _node, _spec
}

// BiodataCreateBulk is the builder for creating many Biodata entities in bulk.
type BiodataCreateBulk struct {
	config
	builders []*BiodataCreate
}

// Save creates the Biodata entities in the database.
func (bcb *BiodataCreateBulk) Save(ctx context.Context) ([]*Biodata, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Biodata, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BiodataMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BiodataCreateBulk) SaveX(ctx context.Context) []*Biodata {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BiodataCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BiodataCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}
