// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Kynesia/ent/family"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Family is the model entity for the Family schema.
type Family struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender string `json:"gender,omitempty"`
	// Birthplace holds the value of the "birthplace" field.
	Birthplace string `json:"birthplace,omitempty"`
	// Birthdate holds the value of the "birthdate" field.
	Birthdate time.Time `json:"birthdate,omitempty"`
	// Education holds the value of the "education" field.
	Education string `json:"education,omitempty"`
	// Job holds the value of the "job" field.
	Job string `json:"job,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FamilyQuery when eager-loading is set.
	Edges FamilyEdges `json:"edges"`
}

// FamilyEdges holds the relations/edges for other nodes in the graph.
type FamilyEdges struct {
	// Register holds the value of the register edge.
	Register []*Register `json:"register,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RegisterOrErr returns the Register value or an error if the edge
// was not loaded in eager-loading.
func (e FamilyEdges) RegisterOrErr() ([]*Register, error) {
	if e.loadedTypes[0] {
		return e.Register, nil
	}
	return nil, &NotLoadedError{edge: "register"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Family) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case family.FieldID:
			values[i] = new(sql.NullInt64)
		case family.FieldStatus, family.FieldName, family.FieldGender, family.FieldBirthplace, family.FieldEducation, family.FieldJob:
			values[i] = new(sql.NullString)
		case family.FieldBirthdate:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Family", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Family fields.
func (f *Family) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case family.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			f.ID = int(value.Int64)
		case family.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				f.Status = value.String
			}
		case family.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				f.Name = value.String
			}
		case family.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				f.Gender = value.String
			}
		case family.FieldBirthplace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field birthplace", values[i])
			} else if value.Valid {
				f.Birthplace = value.String
			}
		case family.FieldBirthdate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birthdate", values[i])
			} else if value.Valid {
				f.Birthdate = value.Time
			}
		case family.FieldEducation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field education", values[i])
			} else if value.Valid {
				f.Education = value.String
			}
		case family.FieldJob:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field job", values[i])
			} else if value.Valid {
				f.Job = value.String
			}
		}
	}
	return nil
}

// QueryRegister queries the "register" edge of the Family entity.
func (f *Family) QueryRegister() *RegisterQuery {
	return (&FamilyClient{config: f.config}).QueryRegister(f)
}

// Update returns a builder for updating this Family.
// Note that you need to call Family.Unwrap() before calling this method if this Family
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Family) Update() *FamilyUpdateOne {
	return (&FamilyClient{config: f.config}).UpdateOne(f)
}

// Unwrap unwraps the Family entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Family) Unwrap() *Family {
	tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Family is not a transactional entity")
	}
	f.config.driver = tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Family) String() string {
	var builder strings.Builder
	builder.WriteString("Family(")
	builder.WriteString(fmt.Sprintf("id=%v", f.ID))
	builder.WriteString(", status=")
	builder.WriteString(f.Status)
	builder.WriteString(", name=")
	builder.WriteString(f.Name)
	builder.WriteString(", gender=")
	builder.WriteString(f.Gender)
	builder.WriteString(", birthplace=")
	builder.WriteString(f.Birthplace)
	builder.WriteString(", birthdate=")
	builder.WriteString(f.Birthdate.Format(time.ANSIC))
	builder.WriteString(", education=")
	builder.WriteString(f.Education)
	builder.WriteString(", job=")
	builder.WriteString(f.Job)
	builder.WriteByte(')')
	return builder.String()
}

// Families is a parsable slice of Family.
type Families []*Family

func (f Families) config(cfg config) {
	for _i := range f {
		f[_i].config = cfg
	}
}
