// Code generated by entc, DO NOT EDIT.

package register

const (
	// Label holds the string label denoting the register type in the database.
	Label = "register"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatusOne holds the string denoting the statusone field in the database.
	FieldStatusOne = "status_one"
	// FieldStatusTwo holds the string denoting the statustwo field in the database.
	FieldStatusTwo = "status_two"
	// FieldOnlineInterview holds the string denoting the onlineinterview field in the database.
	FieldOnlineInterview = "online_interview"
	// FieldInterviewTime holds the string denoting the interviewtime field in the database.
	FieldInterviewTime = "interview_time"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeScholarship holds the string denoting the scholarship edge name in mutations.
	EdgeScholarship = "scholarship"
	// EdgeAchievement holds the string denoting the achievement edge name in mutations.
	EdgeAchievement = "achievement"
	// EdgeBiodata holds the string denoting the biodata edge name in mutations.
	EdgeBiodata = "biodata"
	// EdgeEducation holds the string denoting the education edge name in mutations.
	EdgeEducation = "education"
	// EdgeFamily holds the string denoting the family edge name in mutations.
	EdgeFamily = "family"
	// EdgeLanguage holds the string denoting the language edge name in mutations.
	EdgeLanguage = "language"
	// EdgeNetworth holds the string denoting the networth edge name in mutations.
	EdgeNetworth = "networth"
	// EdgeOrganization holds the string denoting the organization edge name in mutations.
	EdgeOrganization = "organization"
	// EdgeSocialmedia holds the string denoting the socialmedia edge name in mutations.
	EdgeSocialmedia = "socialmedia"
	// EdgeTalent holds the string denoting the talent edge name in mutations.
	EdgeTalent = "talent"
	// EdgeTraining holds the string denoting the training edge name in mutations.
	EdgeTraining = "training"
	// Table holds the table name of the register in the database.
	Table = "registers"
	// UserTable is the table that holds the user relation/edge. The primary key declared below.
	UserTable = "register_user"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// ScholarshipTable is the table that holds the scholarship relation/edge. The primary key declared below.
	ScholarshipTable = "register_scholarship"
	// ScholarshipInverseTable is the table name for the Scholarship entity.
	// It exists in this package in order to avoid circular dependency with the "scholarship" package.
	ScholarshipInverseTable = "scholarships"
	// AchievementTable is the table that holds the achievement relation/edge. The primary key declared below.
	AchievementTable = "achievement_register"
	// AchievementInverseTable is the table name for the Achievement entity.
	// It exists in this package in order to avoid circular dependency with the "achievement" package.
	AchievementInverseTable = "achievements"
	// BiodataTable is the table that holds the biodata relation/edge. The primary key declared below.
	BiodataTable = "biodata_register"
	// BiodataInverseTable is the table name for the Biodata entity.
	// It exists in this package in order to avoid circular dependency with the "biodata" package.
	BiodataInverseTable = "biodata"
	// EducationTable is the table that holds the education relation/edge. The primary key declared below.
	EducationTable = "education_register"
	// EducationInverseTable is the table name for the Education entity.
	// It exists in this package in order to avoid circular dependency with the "education" package.
	EducationInverseTable = "educations"
	// FamilyTable is the table that holds the family relation/edge. The primary key declared below.
	FamilyTable = "family_register"
	// FamilyInverseTable is the table name for the Family entity.
	// It exists in this package in order to avoid circular dependency with the "family" package.
	FamilyInverseTable = "families"
	// LanguageTable is the table that holds the language relation/edge. The primary key declared below.
	LanguageTable = "language_register"
	// LanguageInverseTable is the table name for the Language entity.
	// It exists in this package in order to avoid circular dependency with the "language" package.
	LanguageInverseTable = "languages"
	// NetworthTable is the table that holds the networth relation/edge. The primary key declared below.
	NetworthTable = "networth_register"
	// NetworthInverseTable is the table name for the Networth entity.
	// It exists in this package in order to avoid circular dependency with the "networth" package.
	NetworthInverseTable = "networths"
	// OrganizationTable is the table that holds the organization relation/edge. The primary key declared below.
	OrganizationTable = "organization_register"
	// OrganizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrganizationInverseTable = "organizations"
	// SocialmediaTable is the table that holds the socialmedia relation/edge. The primary key declared below.
	SocialmediaTable = "social_media_register"
	// SocialmediaInverseTable is the table name for the SocialMedia entity.
	// It exists in this package in order to avoid circular dependency with the "socialmedia" package.
	SocialmediaInverseTable = "social_media"
	// TalentTable is the table that holds the talent relation/edge. The primary key declared below.
	TalentTable = "talent_register"
	// TalentInverseTable is the table name for the Talent entity.
	// It exists in this package in order to avoid circular dependency with the "talent" package.
	TalentInverseTable = "talents"
	// TrainingTable is the table that holds the training relation/edge. The primary key declared below.
	TrainingTable = "training_register"
	// TrainingInverseTable is the table name for the Training entity.
	// It exists in this package in order to avoid circular dependency with the "training" package.
	TrainingInverseTable = "trainings"
)

// Columns holds all SQL columns for register fields.
var Columns = []string{
	FieldID,
	FieldStatusOne,
	FieldStatusTwo,
	FieldOnlineInterview,
	FieldInterviewTime,
}

var (
	// UserPrimaryKey and UserColumn2 are the table columns denoting the
	// primary key for the user relation (M2M).
	UserPrimaryKey = []string{"register_id", "user_id"}
	// ScholarshipPrimaryKey and ScholarshipColumn2 are the table columns denoting the
	// primary key for the scholarship relation (M2M).
	ScholarshipPrimaryKey = []string{"register_id", "scholarship_id"}
	// AchievementPrimaryKey and AchievementColumn2 are the table columns denoting the
	// primary key for the achievement relation (M2M).
	AchievementPrimaryKey = []string{"achievement_id", "register_id"}
	// BiodataPrimaryKey and BiodataColumn2 are the table columns denoting the
	// primary key for the biodata relation (M2M).
	BiodataPrimaryKey = []string{"biodata_id", "register_id"}
	// EducationPrimaryKey and EducationColumn2 are the table columns denoting the
	// primary key for the education relation (M2M).
	EducationPrimaryKey = []string{"education_id", "register_id"}
	// FamilyPrimaryKey and FamilyColumn2 are the table columns denoting the
	// primary key for the family relation (M2M).
	FamilyPrimaryKey = []string{"family_id", "register_id"}
	// LanguagePrimaryKey and LanguageColumn2 are the table columns denoting the
	// primary key for the language relation (M2M).
	LanguagePrimaryKey = []string{"language_id", "register_id"}
	// NetworthPrimaryKey and NetworthColumn2 are the table columns denoting the
	// primary key for the networth relation (M2M).
	NetworthPrimaryKey = []string{"networth_id", "register_id"}
	// OrganizationPrimaryKey and OrganizationColumn2 are the table columns denoting the
	// primary key for the organization relation (M2M).
	OrganizationPrimaryKey = []string{"organization_id", "register_id"}
	// SocialmediaPrimaryKey and SocialmediaColumn2 are the table columns denoting the
	// primary key for the socialmedia relation (M2M).
	SocialmediaPrimaryKey = []string{"social_media_id", "register_id"}
	// TalentPrimaryKey and TalentColumn2 are the table columns denoting the
	// primary key for the talent relation (M2M).
	TalentPrimaryKey = []string{"talent_id", "register_id"}
	// TrainingPrimaryKey and TrainingColumn2 are the table columns denoting the
	// primary key for the training relation (M2M).
	TrainingPrimaryKey = []string{"training_id", "register_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultStatusTwo holds the default value on creation for the "statusTwo" field.
	DefaultStatusTwo int
)
