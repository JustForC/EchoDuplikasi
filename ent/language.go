// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Kynesia/ent/language"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Language is the model entity for the Language schema.
type Language struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name *string `json:"name,omitempty"`
	// Talk holds the value of the "talk" field.
	Talk *string `json:"talk,omitempty"`
	// Write holds the value of the "write" field.
	Write *string `json:"write,omitempty"`
	// Read holds the value of the "read" field.
	Read *string `json:"read,omitempty"`
	// Listen holds the value of the "listen" field.
	Listen *string `json:"listen,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Language) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case language.FieldID:
			values[i] = new(sql.NullInt64)
		case language.FieldName, language.FieldTalk, language.FieldWrite, language.FieldRead, language.FieldListen:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Language", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Language fields.
func (l *Language) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case language.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			l.ID = int(value.Int64)
		case language.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				l.Name = new(string)
				*l.Name = value.String
			}
		case language.FieldTalk:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field talk", values[i])
			} else if value.Valid {
				l.Talk = new(string)
				*l.Talk = value.String
			}
		case language.FieldWrite:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field write", values[i])
			} else if value.Valid {
				l.Write = new(string)
				*l.Write = value.String
			}
		case language.FieldRead:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field read", values[i])
			} else if value.Valid {
				l.Read = new(string)
				*l.Read = value.String
			}
		case language.FieldListen:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field listen", values[i])
			} else if value.Valid {
				l.Listen = new(string)
				*l.Listen = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Language.
// Note that you need to call Language.Unwrap() before calling this method if this Language
// was returned from a transaction, and the transaction was committed or rolled back.
func (l *Language) Update() *LanguageUpdateOne {
	return (&LanguageClient{config: l.config}).UpdateOne(l)
}

// Unwrap unwraps the Language entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (l *Language) Unwrap() *Language {
	tx, ok := l.config.driver.(*txDriver)
	if !ok {
		panic("ent: Language is not a transactional entity")
	}
	l.config.driver = tx.drv
	return l
}

// String implements the fmt.Stringer.
func (l *Language) String() string {
	var builder strings.Builder
	builder.WriteString("Language(")
	builder.WriteString(fmt.Sprintf("id=%v", l.ID))
	if v := l.Name; v != nil {
		builder.WriteString(", name=")
		builder.WriteString(*v)
	}
	if v := l.Talk; v != nil {
		builder.WriteString(", talk=")
		builder.WriteString(*v)
	}
	if v := l.Write; v != nil {
		builder.WriteString(", write=")
		builder.WriteString(*v)
	}
	if v := l.Read; v != nil {
		builder.WriteString(", read=")
		builder.WriteString(*v)
	}
	if v := l.Listen; v != nil {
		builder.WriteString(", listen=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Languages is a parsable slice of Language.
type Languages []*Language

func (l Languages) config(cfg config) {
	for _i := range l {
		l[_i].config = cfg
	}
}
