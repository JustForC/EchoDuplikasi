// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"Kynesia/ent/migrate"

	"Kynesia/ent/achievement"
	"Kynesia/ent/biodata"
	"Kynesia/ent/education"
	"Kynesia/ent/family"
	"Kynesia/ent/language"
	"Kynesia/ent/networth"
	"Kynesia/ent/organization"
	"Kynesia/ent/register"
	"Kynesia/ent/scholarship"
	"Kynesia/ent/socialmedia"
	"Kynesia/ent/talent"
	"Kynesia/ent/training"
	"Kynesia/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Achievement is the client for interacting with the Achievement builders.
	Achievement *AchievementClient
	// Biodata is the client for interacting with the Biodata builders.
	Biodata *BiodataClient
	// Education is the client for interacting with the Education builders.
	Education *EducationClient
	// Family is the client for interacting with the Family builders.
	Family *FamilyClient
	// Language is the client for interacting with the Language builders.
	Language *LanguageClient
	// Networth is the client for interacting with the Networth builders.
	Networth *NetworthClient
	// Organization is the client for interacting with the Organization builders.
	Organization *OrganizationClient
	// Register is the client for interacting with the Register builders.
	Register *RegisterClient
	// Scholarship is the client for interacting with the Scholarship builders.
	Scholarship *ScholarshipClient
	// SocialMedia is the client for interacting with the SocialMedia builders.
	SocialMedia *SocialMediaClient
	// Talent is the client for interacting with the Talent builders.
	Talent *TalentClient
	// Training is the client for interacting with the Training builders.
	Training *TrainingClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Achievement = NewAchievementClient(c.config)
	c.Biodata = NewBiodataClient(c.config)
	c.Education = NewEducationClient(c.config)
	c.Family = NewFamilyClient(c.config)
	c.Language = NewLanguageClient(c.config)
	c.Networth = NewNetworthClient(c.config)
	c.Organization = NewOrganizationClient(c.config)
	c.Register = NewRegisterClient(c.config)
	c.Scholarship = NewScholarshipClient(c.config)
	c.SocialMedia = NewSocialMediaClient(c.config)
	c.Talent = NewTalentClient(c.config)
	c.Training = NewTrainingClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Achievement:  NewAchievementClient(cfg),
		Biodata:      NewBiodataClient(cfg),
		Education:    NewEducationClient(cfg),
		Family:       NewFamilyClient(cfg),
		Language:     NewLanguageClient(cfg),
		Networth:     NewNetworthClient(cfg),
		Organization: NewOrganizationClient(cfg),
		Register:     NewRegisterClient(cfg),
		Scholarship:  NewScholarshipClient(cfg),
		SocialMedia:  NewSocialMediaClient(cfg),
		Talent:       NewTalentClient(cfg),
		Training:     NewTrainingClient(cfg),
		User:         NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		Achievement:  NewAchievementClient(cfg),
		Biodata:      NewBiodataClient(cfg),
		Education:    NewEducationClient(cfg),
		Family:       NewFamilyClient(cfg),
		Language:     NewLanguageClient(cfg),
		Networth:     NewNetworthClient(cfg),
		Organization: NewOrganizationClient(cfg),
		Register:     NewRegisterClient(cfg),
		Scholarship:  NewScholarshipClient(cfg),
		SocialMedia:  NewSocialMediaClient(cfg),
		Talent:       NewTalentClient(cfg),
		Training:     NewTrainingClient(cfg),
		User:         NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Achievement.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Achievement.Use(hooks...)
	c.Biodata.Use(hooks...)
	c.Education.Use(hooks...)
	c.Family.Use(hooks...)
	c.Language.Use(hooks...)
	c.Networth.Use(hooks...)
	c.Organization.Use(hooks...)
	c.Register.Use(hooks...)
	c.Scholarship.Use(hooks...)
	c.SocialMedia.Use(hooks...)
	c.Talent.Use(hooks...)
	c.Training.Use(hooks...)
	c.User.Use(hooks...)
}

// AchievementClient is a client for the Achievement schema.
type AchievementClient struct {
	config
}

// NewAchievementClient returns a client for the Achievement from the given config.
func NewAchievementClient(c config) *AchievementClient {
	return &AchievementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `achievement.Hooks(f(g(h())))`.
func (c *AchievementClient) Use(hooks ...Hook) {
	c.hooks.Achievement = append(c.hooks.Achievement, hooks...)
}

// Create returns a create builder for Achievement.
func (c *AchievementClient) Create() *AchievementCreate {
	mutation := newAchievementMutation(c.config, OpCreate)
	return &AchievementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Achievement entities.
func (c *AchievementClient) CreateBulk(builders ...*AchievementCreate) *AchievementCreateBulk {
	return &AchievementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Achievement.
func (c *AchievementClient) Update() *AchievementUpdate {
	mutation := newAchievementMutation(c.config, OpUpdate)
	return &AchievementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AchievementClient) UpdateOne(a *Achievement) *AchievementUpdateOne {
	mutation := newAchievementMutation(c.config, OpUpdateOne, withAchievement(a))
	return &AchievementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AchievementClient) UpdateOneID(id int) *AchievementUpdateOne {
	mutation := newAchievementMutation(c.config, OpUpdateOne, withAchievementID(id))
	return &AchievementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Achievement.
func (c *AchievementClient) Delete() *AchievementDelete {
	mutation := newAchievementMutation(c.config, OpDelete)
	return &AchievementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *AchievementClient) DeleteOne(a *Achievement) *AchievementDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *AchievementClient) DeleteOneID(id int) *AchievementDeleteOne {
	builder := c.Delete().Where(achievement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AchievementDeleteOne{builder}
}

// Query returns a query builder for Achievement.
func (c *AchievementClient) Query() *AchievementQuery {
	return &AchievementQuery{
		config: c.config,
	}
}

// Get returns a Achievement entity by its id.
func (c *AchievementClient) Get(ctx context.Context, id int) (*Achievement, error) {
	return c.Query().Where(achievement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AchievementClient) GetX(ctx context.Context, id int) *Achievement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRegister queries the register edge of a Achievement.
func (c *AchievementClient) QueryRegister(a *Achievement) *RegisterQuery {
	query := &RegisterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := a.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(achievement.Table, achievement.FieldID, id),
			sqlgraph.To(register.Table, register.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, achievement.RegisterTable, achievement.RegisterPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(a.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *AchievementClient) Hooks() []Hook {
	return c.hooks.Achievement
}

// BiodataClient is a client for the Biodata schema.
type BiodataClient struct {
	config
}

// NewBiodataClient returns a client for the Biodata from the given config.
func NewBiodataClient(c config) *BiodataClient {
	return &BiodataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `biodata.Hooks(f(g(h())))`.
func (c *BiodataClient) Use(hooks ...Hook) {
	c.hooks.Biodata = append(c.hooks.Biodata, hooks...)
}

// Create returns a create builder for Biodata.
func (c *BiodataClient) Create() *BiodataCreate {
	mutation := newBiodataMutation(c.config, OpCreate)
	return &BiodataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Biodata entities.
func (c *BiodataClient) CreateBulk(builders ...*BiodataCreate) *BiodataCreateBulk {
	return &BiodataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Biodata.
func (c *BiodataClient) Update() *BiodataUpdate {
	mutation := newBiodataMutation(c.config, OpUpdate)
	return &BiodataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BiodataClient) UpdateOne(b *Biodata) *BiodataUpdateOne {
	mutation := newBiodataMutation(c.config, OpUpdateOne, withBiodata(b))
	return &BiodataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BiodataClient) UpdateOneID(id int) *BiodataUpdateOne {
	mutation := newBiodataMutation(c.config, OpUpdateOne, withBiodataID(id))
	return &BiodataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Biodata.
func (c *BiodataClient) Delete() *BiodataDelete {
	mutation := newBiodataMutation(c.config, OpDelete)
	return &BiodataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BiodataClient) DeleteOne(b *Biodata) *BiodataDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BiodataClient) DeleteOneID(id int) *BiodataDeleteOne {
	builder := c.Delete().Where(biodata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BiodataDeleteOne{builder}
}

// Query returns a query builder for Biodata.
func (c *BiodataClient) Query() *BiodataQuery {
	return &BiodataQuery{
		config: c.config,
	}
}

// Get returns a Biodata entity by its id.
func (c *BiodataClient) Get(ctx context.Context, id int) (*Biodata, error) {
	return c.Query().Where(biodata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BiodataClient) GetX(ctx context.Context, id int) *Biodata {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRegister queries the register edge of a Biodata.
func (c *BiodataClient) QueryRegister(b *Biodata) *RegisterQuery {
	query := &RegisterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := b.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(biodata.Table, biodata.FieldID, id),
			sqlgraph.To(register.Table, register.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, biodata.RegisterTable, biodata.RegisterPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(b.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *BiodataClient) Hooks() []Hook {
	return c.hooks.Biodata
}

// EducationClient is a client for the Education schema.
type EducationClient struct {
	config
}

// NewEducationClient returns a client for the Education from the given config.
func NewEducationClient(c config) *EducationClient {
	return &EducationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `education.Hooks(f(g(h())))`.
func (c *EducationClient) Use(hooks ...Hook) {
	c.hooks.Education = append(c.hooks.Education, hooks...)
}

// Create returns a create builder for Education.
func (c *EducationClient) Create() *EducationCreate {
	mutation := newEducationMutation(c.config, OpCreate)
	return &EducationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Education entities.
func (c *EducationClient) CreateBulk(builders ...*EducationCreate) *EducationCreateBulk {
	return &EducationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Education.
func (c *EducationClient) Update() *EducationUpdate {
	mutation := newEducationMutation(c.config, OpUpdate)
	return &EducationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EducationClient) UpdateOne(e *Education) *EducationUpdateOne {
	mutation := newEducationMutation(c.config, OpUpdateOne, withEducation(e))
	return &EducationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EducationClient) UpdateOneID(id int) *EducationUpdateOne {
	mutation := newEducationMutation(c.config, OpUpdateOne, withEducationID(id))
	return &EducationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Education.
func (c *EducationClient) Delete() *EducationDelete {
	mutation := newEducationMutation(c.config, OpDelete)
	return &EducationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *EducationClient) DeleteOne(e *Education) *EducationDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *EducationClient) DeleteOneID(id int) *EducationDeleteOne {
	builder := c.Delete().Where(education.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EducationDeleteOne{builder}
}

// Query returns a query builder for Education.
func (c *EducationClient) Query() *EducationQuery {
	return &EducationQuery{
		config: c.config,
	}
}

// Get returns a Education entity by its id.
func (c *EducationClient) Get(ctx context.Context, id int) (*Education, error) {
	return c.Query().Where(education.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EducationClient) GetX(ctx context.Context, id int) *Education {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRegister queries the register edge of a Education.
func (c *EducationClient) QueryRegister(e *Education) *RegisterQuery {
	query := &RegisterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(education.Table, education.FieldID, id),
			sqlgraph.To(register.Table, register.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, education.RegisterTable, education.RegisterPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EducationClient) Hooks() []Hook {
	return c.hooks.Education
}

// FamilyClient is a client for the Family schema.
type FamilyClient struct {
	config
}

// NewFamilyClient returns a client for the Family from the given config.
func NewFamilyClient(c config) *FamilyClient {
	return &FamilyClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `family.Hooks(f(g(h())))`.
func (c *FamilyClient) Use(hooks ...Hook) {
	c.hooks.Family = append(c.hooks.Family, hooks...)
}

// Create returns a create builder for Family.
func (c *FamilyClient) Create() *FamilyCreate {
	mutation := newFamilyMutation(c.config, OpCreate)
	return &FamilyCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Family entities.
func (c *FamilyClient) CreateBulk(builders ...*FamilyCreate) *FamilyCreateBulk {
	return &FamilyCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Family.
func (c *FamilyClient) Update() *FamilyUpdate {
	mutation := newFamilyMutation(c.config, OpUpdate)
	return &FamilyUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FamilyClient) UpdateOne(f *Family) *FamilyUpdateOne {
	mutation := newFamilyMutation(c.config, OpUpdateOne, withFamily(f))
	return &FamilyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FamilyClient) UpdateOneID(id int) *FamilyUpdateOne {
	mutation := newFamilyMutation(c.config, OpUpdateOne, withFamilyID(id))
	return &FamilyUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Family.
func (c *FamilyClient) Delete() *FamilyDelete {
	mutation := newFamilyMutation(c.config, OpDelete)
	return &FamilyDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *FamilyClient) DeleteOne(f *Family) *FamilyDeleteOne {
	return c.DeleteOneID(f.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *FamilyClient) DeleteOneID(id int) *FamilyDeleteOne {
	builder := c.Delete().Where(family.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FamilyDeleteOne{builder}
}

// Query returns a query builder for Family.
func (c *FamilyClient) Query() *FamilyQuery {
	return &FamilyQuery{
		config: c.config,
	}
}

// Get returns a Family entity by its id.
func (c *FamilyClient) Get(ctx context.Context, id int) (*Family, error) {
	return c.Query().Where(family.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FamilyClient) GetX(ctx context.Context, id int) *Family {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRegister queries the register edge of a Family.
func (c *FamilyClient) QueryRegister(f *Family) *RegisterQuery {
	query := &RegisterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := f.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(family.Table, family.FieldID, id),
			sqlgraph.To(register.Table, register.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, family.RegisterTable, family.RegisterPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(f.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FamilyClient) Hooks() []Hook {
	return c.hooks.Family
}

// LanguageClient is a client for the Language schema.
type LanguageClient struct {
	config
}

// NewLanguageClient returns a client for the Language from the given config.
func NewLanguageClient(c config) *LanguageClient {
	return &LanguageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `language.Hooks(f(g(h())))`.
func (c *LanguageClient) Use(hooks ...Hook) {
	c.hooks.Language = append(c.hooks.Language, hooks...)
}

// Create returns a create builder for Language.
func (c *LanguageClient) Create() *LanguageCreate {
	mutation := newLanguageMutation(c.config, OpCreate)
	return &LanguageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Language entities.
func (c *LanguageClient) CreateBulk(builders ...*LanguageCreate) *LanguageCreateBulk {
	return &LanguageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Language.
func (c *LanguageClient) Update() *LanguageUpdate {
	mutation := newLanguageMutation(c.config, OpUpdate)
	return &LanguageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *LanguageClient) UpdateOne(l *Language) *LanguageUpdateOne {
	mutation := newLanguageMutation(c.config, OpUpdateOne, withLanguage(l))
	return &LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *LanguageClient) UpdateOneID(id int) *LanguageUpdateOne {
	mutation := newLanguageMutation(c.config, OpUpdateOne, withLanguageID(id))
	return &LanguageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Language.
func (c *LanguageClient) Delete() *LanguageDelete {
	mutation := newLanguageMutation(c.config, OpDelete)
	return &LanguageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *LanguageClient) DeleteOne(l *Language) *LanguageDeleteOne {
	return c.DeleteOneID(l.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *LanguageClient) DeleteOneID(id int) *LanguageDeleteOne {
	builder := c.Delete().Where(language.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &LanguageDeleteOne{builder}
}

// Query returns a query builder for Language.
func (c *LanguageClient) Query() *LanguageQuery {
	return &LanguageQuery{
		config: c.config,
	}
}

// Get returns a Language entity by its id.
func (c *LanguageClient) Get(ctx context.Context, id int) (*Language, error) {
	return c.Query().Where(language.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *LanguageClient) GetX(ctx context.Context, id int) *Language {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRegister queries the register edge of a Language.
func (c *LanguageClient) QueryRegister(l *Language) *RegisterQuery {
	query := &RegisterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := l.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(language.Table, language.FieldID, id),
			sqlgraph.To(register.Table, register.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, language.RegisterTable, language.RegisterPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(l.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *LanguageClient) Hooks() []Hook {
	return c.hooks.Language
}

// NetworthClient is a client for the Networth schema.
type NetworthClient struct {
	config
}

// NewNetworthClient returns a client for the Networth from the given config.
func NewNetworthClient(c config) *NetworthClient {
	return &NetworthClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `networth.Hooks(f(g(h())))`.
func (c *NetworthClient) Use(hooks ...Hook) {
	c.hooks.Networth = append(c.hooks.Networth, hooks...)
}

// Create returns a create builder for Networth.
func (c *NetworthClient) Create() *NetworthCreate {
	mutation := newNetworthMutation(c.config, OpCreate)
	return &NetworthCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Networth entities.
func (c *NetworthClient) CreateBulk(builders ...*NetworthCreate) *NetworthCreateBulk {
	return &NetworthCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Networth.
func (c *NetworthClient) Update() *NetworthUpdate {
	mutation := newNetworthMutation(c.config, OpUpdate)
	return &NetworthUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NetworthClient) UpdateOne(n *Networth) *NetworthUpdateOne {
	mutation := newNetworthMutation(c.config, OpUpdateOne, withNetworth(n))
	return &NetworthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NetworthClient) UpdateOneID(id int) *NetworthUpdateOne {
	mutation := newNetworthMutation(c.config, OpUpdateOne, withNetworthID(id))
	return &NetworthUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Networth.
func (c *NetworthClient) Delete() *NetworthDelete {
	mutation := newNetworthMutation(c.config, OpDelete)
	return &NetworthDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NetworthClient) DeleteOne(n *Networth) *NetworthDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NetworthClient) DeleteOneID(id int) *NetworthDeleteOne {
	builder := c.Delete().Where(networth.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NetworthDeleteOne{builder}
}

// Query returns a query builder for Networth.
func (c *NetworthClient) Query() *NetworthQuery {
	return &NetworthQuery{
		config: c.config,
	}
}

// Get returns a Networth entity by its id.
func (c *NetworthClient) Get(ctx context.Context, id int) (*Networth, error) {
	return c.Query().Where(networth.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NetworthClient) GetX(ctx context.Context, id int) *Networth {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRegister queries the register edge of a Networth.
func (c *NetworthClient) QueryRegister(n *Networth) *RegisterQuery {
	query := &RegisterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(networth.Table, networth.FieldID, id),
			sqlgraph.To(register.Table, register.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, networth.RegisterTable, networth.RegisterPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NetworthClient) Hooks() []Hook {
	return c.hooks.Networth
}

// OrganizationClient is a client for the Organization schema.
type OrganizationClient struct {
	config
}

// NewOrganizationClient returns a client for the Organization from the given config.
func NewOrganizationClient(c config) *OrganizationClient {
	return &OrganizationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organization.Hooks(f(g(h())))`.
func (c *OrganizationClient) Use(hooks ...Hook) {
	c.hooks.Organization = append(c.hooks.Organization, hooks...)
}

// Create returns a create builder for Organization.
func (c *OrganizationClient) Create() *OrganizationCreate {
	mutation := newOrganizationMutation(c.config, OpCreate)
	return &OrganizationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Organization entities.
func (c *OrganizationClient) CreateBulk(builders ...*OrganizationCreate) *OrganizationCreateBulk {
	return &OrganizationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Organization.
func (c *OrganizationClient) Update() *OrganizationUpdate {
	mutation := newOrganizationMutation(c.config, OpUpdate)
	return &OrganizationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationClient) UpdateOne(o *Organization) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganization(o))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationClient) UpdateOneID(id int) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganizationID(id))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Organization.
func (c *OrganizationClient) Delete() *OrganizationDelete {
	mutation := newOrganizationMutation(c.config, OpDelete)
	return &OrganizationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OrganizationClient) DeleteOne(o *Organization) *OrganizationDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OrganizationClient) DeleteOneID(id int) *OrganizationDeleteOne {
	builder := c.Delete().Where(organization.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationDeleteOne{builder}
}

// Query returns a query builder for Organization.
func (c *OrganizationClient) Query() *OrganizationQuery {
	return &OrganizationQuery{
		config: c.config,
	}
}

// Get returns a Organization entity by its id.
func (c *OrganizationClient) Get(ctx context.Context, id int) (*Organization, error) {
	return c.Query().Where(organization.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationClient) GetX(ctx context.Context, id int) *Organization {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRegister queries the register edge of a Organization.
func (c *OrganizationClient) QueryRegister(o *Organization) *RegisterQuery {
	query := &RegisterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(register.Table, register.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, organization.RegisterTable, organization.RegisterPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationClient) Hooks() []Hook {
	return c.hooks.Organization
}

// RegisterClient is a client for the Register schema.
type RegisterClient struct {
	config
}

// NewRegisterClient returns a client for the Register from the given config.
func NewRegisterClient(c config) *RegisterClient {
	return &RegisterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `register.Hooks(f(g(h())))`.
func (c *RegisterClient) Use(hooks ...Hook) {
	c.hooks.Register = append(c.hooks.Register, hooks...)
}

// Create returns a create builder for Register.
func (c *RegisterClient) Create() *RegisterCreate {
	mutation := newRegisterMutation(c.config, OpCreate)
	return &RegisterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Register entities.
func (c *RegisterClient) CreateBulk(builders ...*RegisterCreate) *RegisterCreateBulk {
	return &RegisterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Register.
func (c *RegisterClient) Update() *RegisterUpdate {
	mutation := newRegisterMutation(c.config, OpUpdate)
	return &RegisterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RegisterClient) UpdateOne(r *Register) *RegisterUpdateOne {
	mutation := newRegisterMutation(c.config, OpUpdateOne, withRegister(r))
	return &RegisterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RegisterClient) UpdateOneID(id int) *RegisterUpdateOne {
	mutation := newRegisterMutation(c.config, OpUpdateOne, withRegisterID(id))
	return &RegisterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Register.
func (c *RegisterClient) Delete() *RegisterDelete {
	mutation := newRegisterMutation(c.config, OpDelete)
	return &RegisterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RegisterClient) DeleteOne(r *Register) *RegisterDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RegisterClient) DeleteOneID(id int) *RegisterDeleteOne {
	builder := c.Delete().Where(register.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RegisterDeleteOne{builder}
}

// Query returns a query builder for Register.
func (c *RegisterClient) Query() *RegisterQuery {
	return &RegisterQuery{
		config: c.config,
	}
}

// Get returns a Register entity by its id.
func (c *RegisterClient) Get(ctx context.Context, id int) (*Register, error) {
	return c.Query().Where(register.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RegisterClient) GetX(ctx context.Context, id int) *Register {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Register.
func (c *RegisterClient) QueryUser(r *Register) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(register.Table, register.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, register.UserTable, register.UserPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryScholarship queries the scholarship edge of a Register.
func (c *RegisterClient) QueryScholarship(r *Register) *ScholarshipQuery {
	query := &ScholarshipQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(register.Table, register.FieldID, id),
			sqlgraph.To(scholarship.Table, scholarship.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, register.ScholarshipTable, register.ScholarshipPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryAchievement queries the achievement edge of a Register.
func (c *RegisterClient) QueryAchievement(r *Register) *AchievementQuery {
	query := &AchievementQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(register.Table, register.FieldID, id),
			sqlgraph.To(achievement.Table, achievement.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, register.AchievementTable, register.AchievementPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryBiodata queries the biodata edge of a Register.
func (c *RegisterClient) QueryBiodata(r *Register) *BiodataQuery {
	query := &BiodataQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(register.Table, register.FieldID, id),
			sqlgraph.To(biodata.Table, biodata.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, register.BiodataTable, register.BiodataPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEducation queries the education edge of a Register.
func (c *RegisterClient) QueryEducation(r *Register) *EducationQuery {
	query := &EducationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(register.Table, register.FieldID, id),
			sqlgraph.To(education.Table, education.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, register.EducationTable, register.EducationPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryFamily queries the family edge of a Register.
func (c *RegisterClient) QueryFamily(r *Register) *FamilyQuery {
	query := &FamilyQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(register.Table, register.FieldID, id),
			sqlgraph.To(family.Table, family.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, register.FamilyTable, register.FamilyPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryLanguage queries the language edge of a Register.
func (c *RegisterClient) QueryLanguage(r *Register) *LanguageQuery {
	query := &LanguageQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(register.Table, register.FieldID, id),
			sqlgraph.To(language.Table, language.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, register.LanguageTable, register.LanguagePrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNetworth queries the networth edge of a Register.
func (c *RegisterClient) QueryNetworth(r *Register) *NetworthQuery {
	query := &NetworthQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(register.Table, register.FieldID, id),
			sqlgraph.To(networth.Table, networth.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, register.NetworthTable, register.NetworthPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOrganization queries the organization edge of a Register.
func (c *RegisterClient) QueryOrganization(r *Register) *OrganizationQuery {
	query := &OrganizationQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(register.Table, register.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, register.OrganizationTable, register.OrganizationPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySocialmedia queries the socialmedia edge of a Register.
func (c *RegisterClient) QuerySocialmedia(r *Register) *SocialMediaQuery {
	query := &SocialMediaQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(register.Table, register.FieldID, id),
			sqlgraph.To(socialmedia.Table, socialmedia.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, register.SocialmediaTable, register.SocialmediaPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTalent queries the talent edge of a Register.
func (c *RegisterClient) QueryTalent(r *Register) *TalentQuery {
	query := &TalentQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(register.Table, register.FieldID, id),
			sqlgraph.To(talent.Table, talent.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, register.TalentTable, register.TalentPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTraining queries the training edge of a Register.
func (c *RegisterClient) QueryTraining(r *Register) *TrainingQuery {
	query := &TrainingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(register.Table, register.FieldID, id),
			sqlgraph.To(training.Table, training.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, register.TrainingTable, register.TrainingPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RegisterClient) Hooks() []Hook {
	return c.hooks.Register
}

// ScholarshipClient is a client for the Scholarship schema.
type ScholarshipClient struct {
	config
}

// NewScholarshipClient returns a client for the Scholarship from the given config.
func NewScholarshipClient(c config) *ScholarshipClient {
	return &ScholarshipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `scholarship.Hooks(f(g(h())))`.
func (c *ScholarshipClient) Use(hooks ...Hook) {
	c.hooks.Scholarship = append(c.hooks.Scholarship, hooks...)
}

// Create returns a create builder for Scholarship.
func (c *ScholarshipClient) Create() *ScholarshipCreate {
	mutation := newScholarshipMutation(c.config, OpCreate)
	return &ScholarshipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Scholarship entities.
func (c *ScholarshipClient) CreateBulk(builders ...*ScholarshipCreate) *ScholarshipCreateBulk {
	return &ScholarshipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Scholarship.
func (c *ScholarshipClient) Update() *ScholarshipUpdate {
	mutation := newScholarshipMutation(c.config, OpUpdate)
	return &ScholarshipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScholarshipClient) UpdateOne(s *Scholarship) *ScholarshipUpdateOne {
	mutation := newScholarshipMutation(c.config, OpUpdateOne, withScholarship(s))
	return &ScholarshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScholarshipClient) UpdateOneID(id int) *ScholarshipUpdateOne {
	mutation := newScholarshipMutation(c.config, OpUpdateOne, withScholarshipID(id))
	return &ScholarshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Scholarship.
func (c *ScholarshipClient) Delete() *ScholarshipDelete {
	mutation := newScholarshipMutation(c.config, OpDelete)
	return &ScholarshipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ScholarshipClient) DeleteOne(s *Scholarship) *ScholarshipDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ScholarshipClient) DeleteOneID(id int) *ScholarshipDeleteOne {
	builder := c.Delete().Where(scholarship.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScholarshipDeleteOne{builder}
}

// Query returns a query builder for Scholarship.
func (c *ScholarshipClient) Query() *ScholarshipQuery {
	return &ScholarshipQuery{
		config: c.config,
	}
}

// Get returns a Scholarship entity by its id.
func (c *ScholarshipClient) Get(ctx context.Context, id int) (*Scholarship, error) {
	return c.Query().Where(scholarship.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScholarshipClient) GetX(ctx context.Context, id int) *Scholarship {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRegister queries the register edge of a Scholarship.
func (c *ScholarshipClient) QueryRegister(s *Scholarship) *RegisterQuery {
	query := &RegisterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(scholarship.Table, scholarship.FieldID, id),
			sqlgraph.To(register.Table, register.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, scholarship.RegisterTable, scholarship.RegisterPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ScholarshipClient) Hooks() []Hook {
	return c.hooks.Scholarship
}

// SocialMediaClient is a client for the SocialMedia schema.
type SocialMediaClient struct {
	config
}

// NewSocialMediaClient returns a client for the SocialMedia from the given config.
func NewSocialMediaClient(c config) *SocialMediaClient {
	return &SocialMediaClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `socialmedia.Hooks(f(g(h())))`.
func (c *SocialMediaClient) Use(hooks ...Hook) {
	c.hooks.SocialMedia = append(c.hooks.SocialMedia, hooks...)
}

// Create returns a create builder for SocialMedia.
func (c *SocialMediaClient) Create() *SocialMediaCreate {
	mutation := newSocialMediaMutation(c.config, OpCreate)
	return &SocialMediaCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SocialMedia entities.
func (c *SocialMediaClient) CreateBulk(builders ...*SocialMediaCreate) *SocialMediaCreateBulk {
	return &SocialMediaCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SocialMedia.
func (c *SocialMediaClient) Update() *SocialMediaUpdate {
	mutation := newSocialMediaMutation(c.config, OpUpdate)
	return &SocialMediaUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SocialMediaClient) UpdateOne(sm *SocialMedia) *SocialMediaUpdateOne {
	mutation := newSocialMediaMutation(c.config, OpUpdateOne, withSocialMedia(sm))
	return &SocialMediaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SocialMediaClient) UpdateOneID(id int) *SocialMediaUpdateOne {
	mutation := newSocialMediaMutation(c.config, OpUpdateOne, withSocialMediaID(id))
	return &SocialMediaUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SocialMedia.
func (c *SocialMediaClient) Delete() *SocialMediaDelete {
	mutation := newSocialMediaMutation(c.config, OpDelete)
	return &SocialMediaDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *SocialMediaClient) DeleteOne(sm *SocialMedia) *SocialMediaDeleteOne {
	return c.DeleteOneID(sm.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *SocialMediaClient) DeleteOneID(id int) *SocialMediaDeleteOne {
	builder := c.Delete().Where(socialmedia.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SocialMediaDeleteOne{builder}
}

// Query returns a query builder for SocialMedia.
func (c *SocialMediaClient) Query() *SocialMediaQuery {
	return &SocialMediaQuery{
		config: c.config,
	}
}

// Get returns a SocialMedia entity by its id.
func (c *SocialMediaClient) Get(ctx context.Context, id int) (*SocialMedia, error) {
	return c.Query().Where(socialmedia.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SocialMediaClient) GetX(ctx context.Context, id int) *SocialMedia {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRegister queries the register edge of a SocialMedia.
func (c *SocialMediaClient) QueryRegister(sm *SocialMedia) *RegisterQuery {
	query := &RegisterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := sm.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(socialmedia.Table, socialmedia.FieldID, id),
			sqlgraph.To(register.Table, register.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, socialmedia.RegisterTable, socialmedia.RegisterPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(sm.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SocialMediaClient) Hooks() []Hook {
	return c.hooks.SocialMedia
}

// TalentClient is a client for the Talent schema.
type TalentClient struct {
	config
}

// NewTalentClient returns a client for the Talent from the given config.
func NewTalentClient(c config) *TalentClient {
	return &TalentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `talent.Hooks(f(g(h())))`.
func (c *TalentClient) Use(hooks ...Hook) {
	c.hooks.Talent = append(c.hooks.Talent, hooks...)
}

// Create returns a create builder for Talent.
func (c *TalentClient) Create() *TalentCreate {
	mutation := newTalentMutation(c.config, OpCreate)
	return &TalentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Talent entities.
func (c *TalentClient) CreateBulk(builders ...*TalentCreate) *TalentCreateBulk {
	return &TalentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Talent.
func (c *TalentClient) Update() *TalentUpdate {
	mutation := newTalentMutation(c.config, OpUpdate)
	return &TalentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TalentClient) UpdateOne(t *Talent) *TalentUpdateOne {
	mutation := newTalentMutation(c.config, OpUpdateOne, withTalent(t))
	return &TalentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TalentClient) UpdateOneID(id int) *TalentUpdateOne {
	mutation := newTalentMutation(c.config, OpUpdateOne, withTalentID(id))
	return &TalentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Talent.
func (c *TalentClient) Delete() *TalentDelete {
	mutation := newTalentMutation(c.config, OpDelete)
	return &TalentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TalentClient) DeleteOne(t *Talent) *TalentDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TalentClient) DeleteOneID(id int) *TalentDeleteOne {
	builder := c.Delete().Where(talent.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TalentDeleteOne{builder}
}

// Query returns a query builder for Talent.
func (c *TalentClient) Query() *TalentQuery {
	return &TalentQuery{
		config: c.config,
	}
}

// Get returns a Talent entity by its id.
func (c *TalentClient) Get(ctx context.Context, id int) (*Talent, error) {
	return c.Query().Where(talent.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TalentClient) GetX(ctx context.Context, id int) *Talent {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRegister queries the register edge of a Talent.
func (c *TalentClient) QueryRegister(t *Talent) *RegisterQuery {
	query := &RegisterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(talent.Table, talent.FieldID, id),
			sqlgraph.To(register.Table, register.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, talent.RegisterTable, talent.RegisterPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TalentClient) Hooks() []Hook {
	return c.hooks.Talent
}

// TrainingClient is a client for the Training schema.
type TrainingClient struct {
	config
}

// NewTrainingClient returns a client for the Training from the given config.
func NewTrainingClient(c config) *TrainingClient {
	return &TrainingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `training.Hooks(f(g(h())))`.
func (c *TrainingClient) Use(hooks ...Hook) {
	c.hooks.Training = append(c.hooks.Training, hooks...)
}

// Create returns a create builder for Training.
func (c *TrainingClient) Create() *TrainingCreate {
	mutation := newTrainingMutation(c.config, OpCreate)
	return &TrainingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Training entities.
func (c *TrainingClient) CreateBulk(builders ...*TrainingCreate) *TrainingCreateBulk {
	return &TrainingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Training.
func (c *TrainingClient) Update() *TrainingUpdate {
	mutation := newTrainingMutation(c.config, OpUpdate)
	return &TrainingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TrainingClient) UpdateOne(t *Training) *TrainingUpdateOne {
	mutation := newTrainingMutation(c.config, OpUpdateOne, withTraining(t))
	return &TrainingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TrainingClient) UpdateOneID(id int) *TrainingUpdateOne {
	mutation := newTrainingMutation(c.config, OpUpdateOne, withTrainingID(id))
	return &TrainingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Training.
func (c *TrainingClient) Delete() *TrainingDelete {
	mutation := newTrainingMutation(c.config, OpDelete)
	return &TrainingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TrainingClient) DeleteOne(t *Training) *TrainingDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TrainingClient) DeleteOneID(id int) *TrainingDeleteOne {
	builder := c.Delete().Where(training.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TrainingDeleteOne{builder}
}

// Query returns a query builder for Training.
func (c *TrainingClient) Query() *TrainingQuery {
	return &TrainingQuery{
		config: c.config,
	}
}

// Get returns a Training entity by its id.
func (c *TrainingClient) Get(ctx context.Context, id int) (*Training, error) {
	return c.Query().Where(training.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TrainingClient) GetX(ctx context.Context, id int) *Training {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRegister queries the register edge of a Training.
func (c *TrainingClient) QueryRegister(t *Training) *RegisterQuery {
	query := &RegisterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(training.Table, training.FieldID, id),
			sqlgraph.To(register.Table, register.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, training.RegisterTable, training.RegisterPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TrainingClient) Hooks() []Hook {
	return c.hooks.Training
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRegister queries the register edge of a User.
func (c *UserClient) QueryRegister(u *User) *RegisterQuery {
	query := &RegisterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(register.Table, register.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.RegisterTable, user.RegisterPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
