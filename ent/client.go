// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"Kynesia/ent/migrate"

	"Kynesia/ent/biodata"
	"Kynesia/ent/register"
	"Kynesia/ent/scholarship"
	"Kynesia/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Biodata is the client for interacting with the Biodata builders.
	Biodata *BiodataClient
	// Register is the client for interacting with the Register builders.
	Register *RegisterClient
	// Scholarship is the client for interacting with the Scholarship builders.
	Scholarship *ScholarshipClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Biodata = NewBiodataClient(c.config)
	c.Register = NewRegisterClient(c.config)
	c.Scholarship = NewScholarshipClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Biodata:     NewBiodataClient(cfg),
		Register:    NewRegisterClient(cfg),
		Scholarship: NewScholarshipClient(cfg),
		User:        NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		Biodata:     NewBiodataClient(cfg),
		Register:    NewRegisterClient(cfg),
		Scholarship: NewScholarshipClient(cfg),
		User:        NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Biodata.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Biodata.Use(hooks...)
	c.Register.Use(hooks...)
	c.Scholarship.Use(hooks...)
	c.User.Use(hooks...)
}

// BiodataClient is a client for the Biodata schema.
type BiodataClient struct {
	config
}

// NewBiodataClient returns a client for the Biodata from the given config.
func NewBiodataClient(c config) *BiodataClient {
	return &BiodataClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `biodata.Hooks(f(g(h())))`.
func (c *BiodataClient) Use(hooks ...Hook) {
	c.hooks.Biodata = append(c.hooks.Biodata, hooks...)
}

// Create returns a create builder for Biodata.
func (c *BiodataClient) Create() *BiodataCreate {
	mutation := newBiodataMutation(c.config, OpCreate)
	return &BiodataCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Biodata entities.
func (c *BiodataClient) CreateBulk(builders ...*BiodataCreate) *BiodataCreateBulk {
	return &BiodataCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Biodata.
func (c *BiodataClient) Update() *BiodataUpdate {
	mutation := newBiodataMutation(c.config, OpUpdate)
	return &BiodataUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *BiodataClient) UpdateOne(b *Biodata) *BiodataUpdateOne {
	mutation := newBiodataMutation(c.config, OpUpdateOne, withBiodata(b))
	return &BiodataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *BiodataClient) UpdateOneID(id int) *BiodataUpdateOne {
	mutation := newBiodataMutation(c.config, OpUpdateOne, withBiodataID(id))
	return &BiodataUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Biodata.
func (c *BiodataClient) Delete() *BiodataDelete {
	mutation := newBiodataMutation(c.config, OpDelete)
	return &BiodataDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *BiodataClient) DeleteOne(b *Biodata) *BiodataDeleteOne {
	return c.DeleteOneID(b.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *BiodataClient) DeleteOneID(id int) *BiodataDeleteOne {
	builder := c.Delete().Where(biodata.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &BiodataDeleteOne{builder}
}

// Query returns a query builder for Biodata.
func (c *BiodataClient) Query() *BiodataQuery {
	return &BiodataQuery{
		config: c.config,
	}
}

// Get returns a Biodata entity by its id.
func (c *BiodataClient) Get(ctx context.Context, id int) (*Biodata, error) {
	return c.Query().Where(biodata.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *BiodataClient) GetX(ctx context.Context, id int) *Biodata {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *BiodataClient) Hooks() []Hook {
	return c.hooks.Biodata
}

// RegisterClient is a client for the Register schema.
type RegisterClient struct {
	config
}

// NewRegisterClient returns a client for the Register from the given config.
func NewRegisterClient(c config) *RegisterClient {
	return &RegisterClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `register.Hooks(f(g(h())))`.
func (c *RegisterClient) Use(hooks ...Hook) {
	c.hooks.Register = append(c.hooks.Register, hooks...)
}

// Create returns a create builder for Register.
func (c *RegisterClient) Create() *RegisterCreate {
	mutation := newRegisterMutation(c.config, OpCreate)
	return &RegisterCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Register entities.
func (c *RegisterClient) CreateBulk(builders ...*RegisterCreate) *RegisterCreateBulk {
	return &RegisterCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Register.
func (c *RegisterClient) Update() *RegisterUpdate {
	mutation := newRegisterMutation(c.config, OpUpdate)
	return &RegisterUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *RegisterClient) UpdateOne(r *Register) *RegisterUpdateOne {
	mutation := newRegisterMutation(c.config, OpUpdateOne, withRegister(r))
	return &RegisterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *RegisterClient) UpdateOneID(id int) *RegisterUpdateOne {
	mutation := newRegisterMutation(c.config, OpUpdateOne, withRegisterID(id))
	return &RegisterUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Register.
func (c *RegisterClient) Delete() *RegisterDelete {
	mutation := newRegisterMutation(c.config, OpDelete)
	return &RegisterDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *RegisterClient) DeleteOne(r *Register) *RegisterDeleteOne {
	return c.DeleteOneID(r.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *RegisterClient) DeleteOneID(id int) *RegisterDeleteOne {
	builder := c.Delete().Where(register.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &RegisterDeleteOne{builder}
}

// Query returns a query builder for Register.
func (c *RegisterClient) Query() *RegisterQuery {
	return &RegisterQuery{
		config: c.config,
	}
}

// Get returns a Register entity by its id.
func (c *RegisterClient) Get(ctx context.Context, id int) (*Register, error) {
	return c.Query().Where(register.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *RegisterClient) GetX(ctx context.Context, id int) *Register {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a Register.
func (c *RegisterClient) QueryUser(r *Register) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(register.Table, register.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, register.UserTable, register.UserColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryScholarship queries the scholarship edge of a Register.
func (c *RegisterClient) QueryScholarship(r *Register) *ScholarshipQuery {
	query := &ScholarshipQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := r.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(register.Table, register.FieldID, id),
			sqlgraph.To(scholarship.Table, scholarship.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, register.ScholarshipTable, register.ScholarshipColumn),
		)
		fromV = sqlgraph.Neighbors(r.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *RegisterClient) Hooks() []Hook {
	return c.hooks.Register
}

// ScholarshipClient is a client for the Scholarship schema.
type ScholarshipClient struct {
	config
}

// NewScholarshipClient returns a client for the Scholarship from the given config.
func NewScholarshipClient(c config) *ScholarshipClient {
	return &ScholarshipClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `scholarship.Hooks(f(g(h())))`.
func (c *ScholarshipClient) Use(hooks ...Hook) {
	c.hooks.Scholarship = append(c.hooks.Scholarship, hooks...)
}

// Create returns a create builder for Scholarship.
func (c *ScholarshipClient) Create() *ScholarshipCreate {
	mutation := newScholarshipMutation(c.config, OpCreate)
	return &ScholarshipCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Scholarship entities.
func (c *ScholarshipClient) CreateBulk(builders ...*ScholarshipCreate) *ScholarshipCreateBulk {
	return &ScholarshipCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Scholarship.
func (c *ScholarshipClient) Update() *ScholarshipUpdate {
	mutation := newScholarshipMutation(c.config, OpUpdate)
	return &ScholarshipUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ScholarshipClient) UpdateOne(s *Scholarship) *ScholarshipUpdateOne {
	mutation := newScholarshipMutation(c.config, OpUpdateOne, withScholarship(s))
	return &ScholarshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ScholarshipClient) UpdateOneID(id int) *ScholarshipUpdateOne {
	mutation := newScholarshipMutation(c.config, OpUpdateOne, withScholarshipID(id))
	return &ScholarshipUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Scholarship.
func (c *ScholarshipClient) Delete() *ScholarshipDelete {
	mutation := newScholarshipMutation(c.config, OpDelete)
	return &ScholarshipDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ScholarshipClient) DeleteOne(s *Scholarship) *ScholarshipDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ScholarshipClient) DeleteOneID(id int) *ScholarshipDeleteOne {
	builder := c.Delete().Where(scholarship.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ScholarshipDeleteOne{builder}
}

// Query returns a query builder for Scholarship.
func (c *ScholarshipClient) Query() *ScholarshipQuery {
	return &ScholarshipQuery{
		config: c.config,
	}
}

// Get returns a Scholarship entity by its id.
func (c *ScholarshipClient) Get(ctx context.Context, id int) (*Scholarship, error) {
	return c.Query().Where(scholarship.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ScholarshipClient) GetX(ctx context.Context, id int) *Scholarship {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRegisters queries the registers edge of a Scholarship.
func (c *ScholarshipClient) QueryRegisters(s *Scholarship) *RegisterQuery {
	query := &RegisterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(scholarship.Table, scholarship.FieldID, id),
			sqlgraph.To(register.Table, register.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, scholarship.RegistersTable, scholarship.RegistersColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ScholarshipClient) Hooks() []Hook {
	return c.hooks.Scholarship
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a create builder for User.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryRegisters queries the registers edge of a User.
func (c *UserClient) QueryRegisters(u *User) *RegisterQuery {
	query := &RegisterQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(register.Table, register.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.RegistersTable, user.RegistersColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
