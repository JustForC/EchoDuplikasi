// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Kynesia/ent/biodata"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Biodata is the model entity for the Biodata schema.
type Biodata struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Nickname holds the value of the "nickname" field.
	Nickname string `json:"nickname,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender string `json:"gender,omitempty"`
	// Birthplace holds the value of the "birthplace" field.
	Birthplace string `json:"birthplace,omitempty"`
	// Birthdate holds the value of the "birthdate" field.
	Birthdate time.Time `json:"birthdate,omitempty"`
	// Telephone holds the value of the "telephone" field.
	Telephone string `json:"telephone,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// IdType holds the value of the "idType" field.
	IdType string `json:"idType,omitempty"`
	// IdNumber holds the value of the "idNumber" field.
	IdNumber string `json:"idNumber,omitempty"`
	// AddressID holds the value of the "addressID" field.
	AddressID string `json:"addressID,omitempty"`
	// PostCodeID holds the value of the "postCodeID" field.
	PostCodeID string `json:"postCodeID,omitempty"`
	// DistrictID holds the value of the "districtID" field.
	DistrictID string `json:"districtID,omitempty"`
	// CityID holds the value of the "cityID" field.
	CityID string `json:"cityID,omitempty"`
	// ProvinceID holds the value of the "provinceID" field.
	ProvinceID string `json:"provinceID,omitempty"`
	// AddressLiving holds the value of the "addressLiving" field.
	AddressLiving string `json:"addressLiving,omitempty"`
	// PostCodeLiving holds the value of the "postCodeLiving" field.
	PostCodeLiving string `json:"postCodeLiving,omitempty"`
	// DistrictLiving holds the value of the "districtLiving" field.
	DistrictLiving string `json:"districtLiving,omitempty"`
	// CityLiving holds the value of the "cityLiving" field.
	CityLiving string `json:"cityLiving,omitempty"`
	// ProvinceLiving holds the value of the "provinceLiving" field.
	ProvinceLiving string `json:"provinceLiving,omitempty"`
	// Entrance holds the value of the "entrance" field.
	Entrance string `json:"entrance,omitempty"`
	// EntranceNumber holds the value of the "entranceNumber" field.
	EntranceNumber string `json:"entranceNumber,omitempty"`
	// Major holds the value of the "major" field.
	Major string `json:"major,omitempty"`
	// University holds the value of the "university" field.
	University string `json:"university,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BiodataQuery when eager-loading is set.
	Edges BiodataEdges `json:"edges"`
}

// BiodataEdges holds the relations/edges for other nodes in the graph.
type BiodataEdges struct {
	// Register holds the value of the register edge.
	Register []*Register `json:"register,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RegisterOrErr returns the Register value or an error if the edge
// was not loaded in eager-loading.
func (e BiodataEdges) RegisterOrErr() ([]*Register, error) {
	if e.loadedTypes[0] {
		return e.Register, nil
	}
	return nil, &NotLoadedError{edge: "register"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Biodata) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case biodata.FieldID:
			values[i] = new(sql.NullInt64)
		case biodata.FieldName, biodata.FieldNickname, biodata.FieldGender, biodata.FieldBirthplace, biodata.FieldTelephone, biodata.FieldEmail, biodata.FieldIdType, biodata.FieldIdNumber, biodata.FieldAddressID, biodata.FieldPostCodeID, biodata.FieldDistrictID, biodata.FieldCityID, biodata.FieldProvinceID, biodata.FieldAddressLiving, biodata.FieldPostCodeLiving, biodata.FieldDistrictLiving, biodata.FieldCityLiving, biodata.FieldProvinceLiving, biodata.FieldEntrance, biodata.FieldEntranceNumber, biodata.FieldMajor, biodata.FieldUniversity:
			values[i] = new(sql.NullString)
		case biodata.FieldBirthdate:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Biodata", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Biodata fields.
func (b *Biodata) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case biodata.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = int(value.Int64)
		case biodata.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				b.Name = value.String
			}
		case biodata.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				b.Nickname = value.String
			}
		case biodata.FieldGender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				b.Gender = value.String
			}
		case biodata.FieldBirthplace:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field birthplace", values[i])
			} else if value.Valid {
				b.Birthplace = value.String
			}
		case biodata.FieldBirthdate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field birthdate", values[i])
			} else if value.Valid {
				b.Birthdate = value.Time
			}
		case biodata.FieldTelephone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field telephone", values[i])
			} else if value.Valid {
				b.Telephone = value.String
			}
		case biodata.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				b.Email = value.String
			}
		case biodata.FieldIdType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field idType", values[i])
			} else if value.Valid {
				b.IdType = value.String
			}
		case biodata.FieldIdNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field idNumber", values[i])
			} else if value.Valid {
				b.IdNumber = value.String
			}
		case biodata.FieldAddressID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field addressID", values[i])
			} else if value.Valid {
				b.AddressID = value.String
			}
		case biodata.FieldPostCodeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field postCodeID", values[i])
			} else if value.Valid {
				b.PostCodeID = value.String
			}
		case biodata.FieldDistrictID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field districtID", values[i])
			} else if value.Valid {
				b.DistrictID = value.String
			}
		case biodata.FieldCityID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cityID", values[i])
			} else if value.Valid {
				b.CityID = value.String
			}
		case biodata.FieldProvinceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provinceID", values[i])
			} else if value.Valid {
				b.ProvinceID = value.String
			}
		case biodata.FieldAddressLiving:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field addressLiving", values[i])
			} else if value.Valid {
				b.AddressLiving = value.String
			}
		case biodata.FieldPostCodeLiving:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field postCodeLiving", values[i])
			} else if value.Valid {
				b.PostCodeLiving = value.String
			}
		case biodata.FieldDistrictLiving:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field districtLiving", values[i])
			} else if value.Valid {
				b.DistrictLiving = value.String
			}
		case biodata.FieldCityLiving:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cityLiving", values[i])
			} else if value.Valid {
				b.CityLiving = value.String
			}
		case biodata.FieldProvinceLiving:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provinceLiving", values[i])
			} else if value.Valid {
				b.ProvinceLiving = value.String
			}
		case biodata.FieldEntrance:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entrance", values[i])
			} else if value.Valid {
				b.Entrance = value.String
			}
		case biodata.FieldEntranceNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entranceNumber", values[i])
			} else if value.Valid {
				b.EntranceNumber = value.String
			}
		case biodata.FieldMajor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field major", values[i])
			} else if value.Valid {
				b.Major = value.String
			}
		case biodata.FieldUniversity:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field university", values[i])
			} else if value.Valid {
				b.University = value.String
			}
		}
	}
	return nil
}

// QueryRegister queries the "register" edge of the Biodata entity.
func (b *Biodata) QueryRegister() *RegisterQuery {
	return (&BiodataClient{config: b.config}).QueryRegister(b)
}

// Update returns a builder for updating this Biodata.
// Note that you need to call Biodata.Unwrap() before calling this method if this Biodata
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Biodata) Update() *BiodataUpdateOne {
	return (&BiodataClient{config: b.config}).UpdateOne(b)
}

// Unwrap unwraps the Biodata entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Biodata) Unwrap() *Biodata {
	tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Biodata is not a transactional entity")
	}
	b.config.driver = tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Biodata) String() string {
	var builder strings.Builder
	builder.WriteString("Biodata(")
	builder.WriteString(fmt.Sprintf("id=%v", b.ID))
	builder.WriteString(", name=")
	builder.WriteString(b.Name)
	builder.WriteString(", nickname=")
	builder.WriteString(b.Nickname)
	builder.WriteString(", gender=")
	builder.WriteString(b.Gender)
	builder.WriteString(", birthplace=")
	builder.WriteString(b.Birthplace)
	builder.WriteString(", birthdate=")
	builder.WriteString(b.Birthdate.Format(time.ANSIC))
	builder.WriteString(", telephone=")
	builder.WriteString(b.Telephone)
	builder.WriteString(", email=")
	builder.WriteString(b.Email)
	builder.WriteString(", idType=")
	builder.WriteString(b.IdType)
	builder.WriteString(", idNumber=")
	builder.WriteString(b.IdNumber)
	builder.WriteString(", addressID=")
	builder.WriteString(b.AddressID)
	builder.WriteString(", postCodeID=")
	builder.WriteString(b.PostCodeID)
	builder.WriteString(", districtID=")
	builder.WriteString(b.DistrictID)
	builder.WriteString(", cityID=")
	builder.WriteString(b.CityID)
	builder.WriteString(", provinceID=")
	builder.WriteString(b.ProvinceID)
	builder.WriteString(", addressLiving=")
	builder.WriteString(b.AddressLiving)
	builder.WriteString(", postCodeLiving=")
	builder.WriteString(b.PostCodeLiving)
	builder.WriteString(", districtLiving=")
	builder.WriteString(b.DistrictLiving)
	builder.WriteString(", cityLiving=")
	builder.WriteString(b.CityLiving)
	builder.WriteString(", provinceLiving=")
	builder.WriteString(b.ProvinceLiving)
	builder.WriteString(", entrance=")
	builder.WriteString(b.Entrance)
	builder.WriteString(", entranceNumber=")
	builder.WriteString(b.EntranceNumber)
	builder.WriteString(", major=")
	builder.WriteString(b.Major)
	builder.WriteString(", university=")
	builder.WriteString(b.University)
	builder.WriteByte(')')
	return builder.String()
}

// BiodataSlice is a parsable slice of Biodata.
type BiodataSlice []*Biodata

func (b BiodataSlice) config(cfg config) {
	for _i := range b {
		b[_i].config = cfg
	}
}
