// Code generated by entc, DO NOT EDIT.

package achievement

import (
	"Kynesia/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Organizer applies equality check predicate on the "organizer" field. It's identical to OrganizerEQ.
func Organizer(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrganizer), v))
	})
}

// Level applies equality check predicate on the "level" field. It's identical to LevelEQ.
func Level(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLevel), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Achievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Achievement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Achievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Achievement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// OrganizerEQ applies the EQ predicate on the "organizer" field.
func OrganizerEQ(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOrganizer), v))
	})
}

// OrganizerNEQ applies the NEQ predicate on the "organizer" field.
func OrganizerNEQ(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOrganizer), v))
	})
}

// OrganizerIn applies the In predicate on the "organizer" field.
func OrganizerIn(vs ...string) predicate.Achievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Achievement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOrganizer), v...))
	})
}

// OrganizerNotIn applies the NotIn predicate on the "organizer" field.
func OrganizerNotIn(vs ...string) predicate.Achievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Achievement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOrganizer), v...))
	})
}

// OrganizerGT applies the GT predicate on the "organizer" field.
func OrganizerGT(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOrganizer), v))
	})
}

// OrganizerGTE applies the GTE predicate on the "organizer" field.
func OrganizerGTE(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOrganizer), v))
	})
}

// OrganizerLT applies the LT predicate on the "organizer" field.
func OrganizerLT(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOrganizer), v))
	})
}

// OrganizerLTE applies the LTE predicate on the "organizer" field.
func OrganizerLTE(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOrganizer), v))
	})
}

// OrganizerContains applies the Contains predicate on the "organizer" field.
func OrganizerContains(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOrganizer), v))
	})
}

// OrganizerHasPrefix applies the HasPrefix predicate on the "organizer" field.
func OrganizerHasPrefix(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOrganizer), v))
	})
}

// OrganizerHasSuffix applies the HasSuffix predicate on the "organizer" field.
func OrganizerHasSuffix(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOrganizer), v))
	})
}

// OrganizerIsNil applies the IsNil predicate on the "organizer" field.
func OrganizerIsNil() predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldOrganizer)))
	})
}

// OrganizerNotNil applies the NotNil predicate on the "organizer" field.
func OrganizerNotNil() predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldOrganizer)))
	})
}

// OrganizerEqualFold applies the EqualFold predicate on the "organizer" field.
func OrganizerEqualFold(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOrganizer), v))
	})
}

// OrganizerContainsFold applies the ContainsFold predicate on the "organizer" field.
func OrganizerContainsFold(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOrganizer), v))
	})
}

// LevelEQ applies the EQ predicate on the "level" field.
func LevelEQ(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLevel), v))
	})
}

// LevelNEQ applies the NEQ predicate on the "level" field.
func LevelNEQ(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLevel), v))
	})
}

// LevelIn applies the In predicate on the "level" field.
func LevelIn(vs ...string) predicate.Achievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Achievement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLevel), v...))
	})
}

// LevelNotIn applies the NotIn predicate on the "level" field.
func LevelNotIn(vs ...string) predicate.Achievement {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Achievement(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLevel), v...))
	})
}

// LevelGT applies the GT predicate on the "level" field.
func LevelGT(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLevel), v))
	})
}

// LevelGTE applies the GTE predicate on the "level" field.
func LevelGTE(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLevel), v))
	})
}

// LevelLT applies the LT predicate on the "level" field.
func LevelLT(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLevel), v))
	})
}

// LevelLTE applies the LTE predicate on the "level" field.
func LevelLTE(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLevel), v))
	})
}

// LevelContains applies the Contains predicate on the "level" field.
func LevelContains(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldLevel), v))
	})
}

// LevelHasPrefix applies the HasPrefix predicate on the "level" field.
func LevelHasPrefix(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldLevel), v))
	})
}

// LevelHasSuffix applies the HasSuffix predicate on the "level" field.
func LevelHasSuffix(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldLevel), v))
	})
}

// LevelIsNil applies the IsNil predicate on the "level" field.
func LevelIsNil() predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldLevel)))
	})
}

// LevelNotNil applies the NotNil predicate on the "level" field.
func LevelNotNil() predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldLevel)))
	})
}

// LevelEqualFold applies the EqualFold predicate on the "level" field.
func LevelEqualFold(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldLevel), v))
	})
}

// LevelContainsFold applies the ContainsFold predicate on the "level" field.
func LevelContainsFold(v string) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldLevel), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Achievement) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Achievement) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Achievement) predicate.Achievement {
	return predicate.Achievement(func(s *sql.Selector) {
		p(s.Not())
	})
}
