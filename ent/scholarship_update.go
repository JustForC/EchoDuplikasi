// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Kynesia/ent/predicate"
	"Kynesia/ent/register"
	"Kynesia/ent/scholarship"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScholarshipUpdate is the builder for updating Scholarship entities.
type ScholarshipUpdate struct {
	config
	hooks    []Hook
	mutation *ScholarshipMutation
}

// Where appends a list predicates to the ScholarshipUpdate builder.
func (su *ScholarshipUpdate) Where(ps ...predicate.Scholarship) *ScholarshipUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *ScholarshipUpdate) SetName(s string) *ScholarshipUpdate {
	su.mutation.SetName(s)
	return su
}

// SetStartStepOne sets the "startStepOne" field.
func (su *ScholarshipUpdate) SetStartStepOne(t time.Time) *ScholarshipUpdate {
	su.mutation.SetStartStepOne(t)
	return su
}

// SetStartStepTwo sets the "startStepTwo" field.
func (su *ScholarshipUpdate) SetStartStepTwo(t time.Time) *ScholarshipUpdate {
	su.mutation.SetStartStepTwo(t)
	return su
}

// SetEndStepOne sets the "endStepOne" field.
func (su *ScholarshipUpdate) SetEndStepOne(t time.Time) *ScholarshipUpdate {
	su.mutation.SetEndStepOne(t)
	return su
}

// SetEndStepTwo sets the "endStepTwo" field.
func (su *ScholarshipUpdate) SetEndStepTwo(t time.Time) *ScholarshipUpdate {
	su.mutation.SetEndStepTwo(t)
	return su
}

// SetAnnounceStepOne sets the "announceStepOne" field.
func (su *ScholarshipUpdate) SetAnnounceStepOne(t time.Time) *ScholarshipUpdate {
	su.mutation.SetAnnounceStepOne(t)
	return su
}

// SetAnnounceStepTwo sets the "announceStepTwo" field.
func (su *ScholarshipUpdate) SetAnnounceStepTwo(t time.Time) *ScholarshipUpdate {
	su.mutation.SetAnnounceStepTwo(t)
	return su
}

// SetOnlineTest sets the "onlineTest" field.
func (su *ScholarshipUpdate) SetOnlineTest(s string) *ScholarshipUpdate {
	su.mutation.SetOnlineTest(s)
	return su
}

// SetStatus sets the "status" field.
func (su *ScholarshipUpdate) SetStatus(i int) *ScholarshipUpdate {
	su.mutation.ResetStatus()
	su.mutation.SetStatus(i)
	return su
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (su *ScholarshipUpdate) SetNillableStatus(i *int) *ScholarshipUpdate {
	if i != nil {
		su.SetStatus(*i)
	}
	return su
}

// AddStatus adds i to the "status" field.
func (su *ScholarshipUpdate) AddStatus(i int) *ScholarshipUpdate {
	su.mutation.AddStatus(i)
	return su
}

// AddRegisterIDs adds the "register" edge to the Register entity by IDs.
func (su *ScholarshipUpdate) AddRegisterIDs(ids ...int) *ScholarshipUpdate {
	su.mutation.AddRegisterIDs(ids...)
	return su
}

// AddRegister adds the "register" edges to the Register entity.
func (su *ScholarshipUpdate) AddRegister(r ...*Register) *ScholarshipUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.AddRegisterIDs(ids...)
}

// Mutation returns the ScholarshipMutation object of the builder.
func (su *ScholarshipUpdate) Mutation() *ScholarshipMutation {
	return su.mutation
}

// ClearRegister clears all "register" edges to the Register entity.
func (su *ScholarshipUpdate) ClearRegister() *ScholarshipUpdate {
	su.mutation.ClearRegister()
	return su
}

// RemoveRegisterIDs removes the "register" edge to Register entities by IDs.
func (su *ScholarshipUpdate) RemoveRegisterIDs(ids ...int) *ScholarshipUpdate {
	su.mutation.RemoveRegisterIDs(ids...)
	return su
}

// RemoveRegister removes "register" edges to Register entities.
func (su *ScholarshipUpdate) RemoveRegister(r ...*Register) *ScholarshipUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.RemoveRegisterIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ScholarshipUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScholarshipMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			if su.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *ScholarshipUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ScholarshipUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ScholarshipUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *ScholarshipUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   scholarship.Table,
			Columns: scholarship.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: scholarship.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: scholarship.FieldName,
		})
	}
	if value, ok := su.mutation.StartStepOne(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scholarship.FieldStartStepOne,
		})
	}
	if value, ok := su.mutation.StartStepTwo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scholarship.FieldStartStepTwo,
		})
	}
	if value, ok := su.mutation.EndStepOne(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scholarship.FieldEndStepOne,
		})
	}
	if value, ok := su.mutation.EndStepTwo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scholarship.FieldEndStepTwo,
		})
	}
	if value, ok := su.mutation.AnnounceStepOne(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scholarship.FieldAnnounceStepOne,
		})
	}
	if value, ok := su.mutation.AnnounceStepTwo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scholarship.FieldAnnounceStepTwo,
		})
	}
	if value, ok := su.mutation.OnlineTest(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: scholarship.FieldOnlineTest,
		})
	}
	if value, ok := su.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: scholarship.FieldStatus,
		})
	}
	if value, ok := su.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: scholarship.FieldStatus,
		})
	}
	if su.mutation.RegisterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scholarship.RegisterTable,
			Columns: scholarship.RegisterPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: register.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedRegisterIDs(); len(nodes) > 0 && !su.mutation.RegisterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scholarship.RegisterTable,
			Columns: scholarship.RegisterPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: register.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RegisterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scholarship.RegisterTable,
			Columns: scholarship.RegisterPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: register.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scholarship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ScholarshipUpdateOne is the builder for updating a single Scholarship entity.
type ScholarshipUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ScholarshipMutation
}

// SetName sets the "name" field.
func (suo *ScholarshipUpdateOne) SetName(s string) *ScholarshipUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetStartStepOne sets the "startStepOne" field.
func (suo *ScholarshipUpdateOne) SetStartStepOne(t time.Time) *ScholarshipUpdateOne {
	suo.mutation.SetStartStepOne(t)
	return suo
}

// SetStartStepTwo sets the "startStepTwo" field.
func (suo *ScholarshipUpdateOne) SetStartStepTwo(t time.Time) *ScholarshipUpdateOne {
	suo.mutation.SetStartStepTwo(t)
	return suo
}

// SetEndStepOne sets the "endStepOne" field.
func (suo *ScholarshipUpdateOne) SetEndStepOne(t time.Time) *ScholarshipUpdateOne {
	suo.mutation.SetEndStepOne(t)
	return suo
}

// SetEndStepTwo sets the "endStepTwo" field.
func (suo *ScholarshipUpdateOne) SetEndStepTwo(t time.Time) *ScholarshipUpdateOne {
	suo.mutation.SetEndStepTwo(t)
	return suo
}

// SetAnnounceStepOne sets the "announceStepOne" field.
func (suo *ScholarshipUpdateOne) SetAnnounceStepOne(t time.Time) *ScholarshipUpdateOne {
	suo.mutation.SetAnnounceStepOne(t)
	return suo
}

// SetAnnounceStepTwo sets the "announceStepTwo" field.
func (suo *ScholarshipUpdateOne) SetAnnounceStepTwo(t time.Time) *ScholarshipUpdateOne {
	suo.mutation.SetAnnounceStepTwo(t)
	return suo
}

// SetOnlineTest sets the "onlineTest" field.
func (suo *ScholarshipUpdateOne) SetOnlineTest(s string) *ScholarshipUpdateOne {
	suo.mutation.SetOnlineTest(s)
	return suo
}

// SetStatus sets the "status" field.
func (suo *ScholarshipUpdateOne) SetStatus(i int) *ScholarshipUpdateOne {
	suo.mutation.ResetStatus()
	suo.mutation.SetStatus(i)
	return suo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (suo *ScholarshipUpdateOne) SetNillableStatus(i *int) *ScholarshipUpdateOne {
	if i != nil {
		suo.SetStatus(*i)
	}
	return suo
}

// AddStatus adds i to the "status" field.
func (suo *ScholarshipUpdateOne) AddStatus(i int) *ScholarshipUpdateOne {
	suo.mutation.AddStatus(i)
	return suo
}

// AddRegisterIDs adds the "register" edge to the Register entity by IDs.
func (suo *ScholarshipUpdateOne) AddRegisterIDs(ids ...int) *ScholarshipUpdateOne {
	suo.mutation.AddRegisterIDs(ids...)
	return suo
}

// AddRegister adds the "register" edges to the Register entity.
func (suo *ScholarshipUpdateOne) AddRegister(r ...*Register) *ScholarshipUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.AddRegisterIDs(ids...)
}

// Mutation returns the ScholarshipMutation object of the builder.
func (suo *ScholarshipUpdateOne) Mutation() *ScholarshipMutation {
	return suo.mutation
}

// ClearRegister clears all "register" edges to the Register entity.
func (suo *ScholarshipUpdateOne) ClearRegister() *ScholarshipUpdateOne {
	suo.mutation.ClearRegister()
	return suo
}

// RemoveRegisterIDs removes the "register" edge to Register entities by IDs.
func (suo *ScholarshipUpdateOne) RemoveRegisterIDs(ids ...int) *ScholarshipUpdateOne {
	suo.mutation.RemoveRegisterIDs(ids...)
	return suo
}

// RemoveRegister removes "register" edges to Register entities.
func (suo *ScholarshipUpdateOne) RemoveRegister(r ...*Register) *ScholarshipUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.RemoveRegisterIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ScholarshipUpdateOne) Select(field string, fields ...string) *ScholarshipUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Scholarship entity.
func (suo *ScholarshipUpdateOne) Save(ctx context.Context) (*Scholarship, error) {
	var (
		err  error
		node *Scholarship
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScholarshipMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			if suo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ScholarshipUpdateOne) SaveX(ctx context.Context) *Scholarship {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ScholarshipUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ScholarshipUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *ScholarshipUpdateOne) sqlSave(ctx context.Context) (_node *Scholarship, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   scholarship.Table,
			Columns: scholarship.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: scholarship.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Scholarship.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scholarship.FieldID)
		for _, f := range fields {
			if !scholarship.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scholarship.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: scholarship.FieldName,
		})
	}
	if value, ok := suo.mutation.StartStepOne(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scholarship.FieldStartStepOne,
		})
	}
	if value, ok := suo.mutation.StartStepTwo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scholarship.FieldStartStepTwo,
		})
	}
	if value, ok := suo.mutation.EndStepOne(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scholarship.FieldEndStepOne,
		})
	}
	if value, ok := suo.mutation.EndStepTwo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scholarship.FieldEndStepTwo,
		})
	}
	if value, ok := suo.mutation.AnnounceStepOne(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scholarship.FieldAnnounceStepOne,
		})
	}
	if value, ok := suo.mutation.AnnounceStepTwo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scholarship.FieldAnnounceStepTwo,
		})
	}
	if value, ok := suo.mutation.OnlineTest(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: scholarship.FieldOnlineTest,
		})
	}
	if value, ok := suo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: scholarship.FieldStatus,
		})
	}
	if value, ok := suo.mutation.AddedStatus(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: scholarship.FieldStatus,
		})
	}
	if suo.mutation.RegisterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scholarship.RegisterTable,
			Columns: scholarship.RegisterPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: register.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedRegisterIDs(); len(nodes) > 0 && !suo.mutation.RegisterCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scholarship.RegisterTable,
			Columns: scholarship.RegisterPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: register.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RegisterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scholarship.RegisterTable,
			Columns: scholarship.RegisterPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: register.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Scholarship{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scholarship.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
