// Code generated by entc, DO NOT EDIT.

package language

import (
	"Kynesia/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Talk applies equality check predicate on the "talk" field. It's identical to TalkEQ.
func Talk(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTalk), v))
	})
}

// Write applies equality check predicate on the "write" field. It's identical to WriteEQ.
func Write(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWrite), v))
	})
}

// Read applies equality check predicate on the "read" field. It's identical to ReadEQ.
func Read(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRead), v))
	})
}

// Listen applies equality check predicate on the "listen" field. It's identical to ListenEQ.
func Listen(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldListen), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Language {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Language(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Language {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Language(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// TalkEQ applies the EQ predicate on the "talk" field.
func TalkEQ(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTalk), v))
	})
}

// TalkNEQ applies the NEQ predicate on the "talk" field.
func TalkNEQ(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTalk), v))
	})
}

// TalkIn applies the In predicate on the "talk" field.
func TalkIn(vs ...string) predicate.Language {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Language(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTalk), v...))
	})
}

// TalkNotIn applies the NotIn predicate on the "talk" field.
func TalkNotIn(vs ...string) predicate.Language {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Language(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTalk), v...))
	})
}

// TalkGT applies the GT predicate on the "talk" field.
func TalkGT(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTalk), v))
	})
}

// TalkGTE applies the GTE predicate on the "talk" field.
func TalkGTE(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTalk), v))
	})
}

// TalkLT applies the LT predicate on the "talk" field.
func TalkLT(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTalk), v))
	})
}

// TalkLTE applies the LTE predicate on the "talk" field.
func TalkLTE(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTalk), v))
	})
}

// TalkContains applies the Contains predicate on the "talk" field.
func TalkContains(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTalk), v))
	})
}

// TalkHasPrefix applies the HasPrefix predicate on the "talk" field.
func TalkHasPrefix(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTalk), v))
	})
}

// TalkHasSuffix applies the HasSuffix predicate on the "talk" field.
func TalkHasSuffix(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTalk), v))
	})
}

// TalkEqualFold applies the EqualFold predicate on the "talk" field.
func TalkEqualFold(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTalk), v))
	})
}

// TalkContainsFold applies the ContainsFold predicate on the "talk" field.
func TalkContainsFold(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTalk), v))
	})
}

// WriteEQ applies the EQ predicate on the "write" field.
func WriteEQ(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldWrite), v))
	})
}

// WriteNEQ applies the NEQ predicate on the "write" field.
func WriteNEQ(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldWrite), v))
	})
}

// WriteIn applies the In predicate on the "write" field.
func WriteIn(vs ...string) predicate.Language {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Language(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldWrite), v...))
	})
}

// WriteNotIn applies the NotIn predicate on the "write" field.
func WriteNotIn(vs ...string) predicate.Language {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Language(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldWrite), v...))
	})
}

// WriteGT applies the GT predicate on the "write" field.
func WriteGT(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldWrite), v))
	})
}

// WriteGTE applies the GTE predicate on the "write" field.
func WriteGTE(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldWrite), v))
	})
}

// WriteLT applies the LT predicate on the "write" field.
func WriteLT(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldWrite), v))
	})
}

// WriteLTE applies the LTE predicate on the "write" field.
func WriteLTE(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldWrite), v))
	})
}

// WriteContains applies the Contains predicate on the "write" field.
func WriteContains(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldWrite), v))
	})
}

// WriteHasPrefix applies the HasPrefix predicate on the "write" field.
func WriteHasPrefix(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldWrite), v))
	})
}

// WriteHasSuffix applies the HasSuffix predicate on the "write" field.
func WriteHasSuffix(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldWrite), v))
	})
}

// WriteEqualFold applies the EqualFold predicate on the "write" field.
func WriteEqualFold(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldWrite), v))
	})
}

// WriteContainsFold applies the ContainsFold predicate on the "write" field.
func WriteContainsFold(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldWrite), v))
	})
}

// ReadEQ applies the EQ predicate on the "read" field.
func ReadEQ(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRead), v))
	})
}

// ReadNEQ applies the NEQ predicate on the "read" field.
func ReadNEQ(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRead), v))
	})
}

// ReadIn applies the In predicate on the "read" field.
func ReadIn(vs ...string) predicate.Language {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Language(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRead), v...))
	})
}

// ReadNotIn applies the NotIn predicate on the "read" field.
func ReadNotIn(vs ...string) predicate.Language {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Language(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRead), v...))
	})
}

// ReadGT applies the GT predicate on the "read" field.
func ReadGT(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRead), v))
	})
}

// ReadGTE applies the GTE predicate on the "read" field.
func ReadGTE(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRead), v))
	})
}

// ReadLT applies the LT predicate on the "read" field.
func ReadLT(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRead), v))
	})
}

// ReadLTE applies the LTE predicate on the "read" field.
func ReadLTE(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRead), v))
	})
}

// ReadContains applies the Contains predicate on the "read" field.
func ReadContains(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRead), v))
	})
}

// ReadHasPrefix applies the HasPrefix predicate on the "read" field.
func ReadHasPrefix(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRead), v))
	})
}

// ReadHasSuffix applies the HasSuffix predicate on the "read" field.
func ReadHasSuffix(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRead), v))
	})
}

// ReadEqualFold applies the EqualFold predicate on the "read" field.
func ReadEqualFold(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRead), v))
	})
}

// ReadContainsFold applies the ContainsFold predicate on the "read" field.
func ReadContainsFold(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRead), v))
	})
}

// ListenEQ applies the EQ predicate on the "listen" field.
func ListenEQ(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldListen), v))
	})
}

// ListenNEQ applies the NEQ predicate on the "listen" field.
func ListenNEQ(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldListen), v))
	})
}

// ListenIn applies the In predicate on the "listen" field.
func ListenIn(vs ...string) predicate.Language {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Language(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldListen), v...))
	})
}

// ListenNotIn applies the NotIn predicate on the "listen" field.
func ListenNotIn(vs ...string) predicate.Language {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Language(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldListen), v...))
	})
}

// ListenGT applies the GT predicate on the "listen" field.
func ListenGT(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldListen), v))
	})
}

// ListenGTE applies the GTE predicate on the "listen" field.
func ListenGTE(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldListen), v))
	})
}

// ListenLT applies the LT predicate on the "listen" field.
func ListenLT(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldListen), v))
	})
}

// ListenLTE applies the LTE predicate on the "listen" field.
func ListenLTE(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldListen), v))
	})
}

// ListenContains applies the Contains predicate on the "listen" field.
func ListenContains(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldListen), v))
	})
}

// ListenHasPrefix applies the HasPrefix predicate on the "listen" field.
func ListenHasPrefix(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldListen), v))
	})
}

// ListenHasSuffix applies the HasSuffix predicate on the "listen" field.
func ListenHasSuffix(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldListen), v))
	})
}

// ListenEqualFold applies the EqualFold predicate on the "listen" field.
func ListenEqualFold(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldListen), v))
	})
}

// ListenContainsFold applies the ContainsFold predicate on the "listen" field.
func ListenContainsFold(v string) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldListen), v))
	})
}

// HasRegister applies the HasEdge predicate on the "register" edge.
func HasRegister() predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RegisterTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RegisterTable, RegisterPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRegisterWith applies the HasEdge predicate on the "register" edge with a given conditions (other predicates).
func HasRegisterWith(preds ...predicate.Register) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RegisterInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RegisterTable, RegisterPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Language) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Language) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Language) predicate.Language {
	return predicate.Language(func(s *sql.Selector) {
		p(s.Not())
	})
}
