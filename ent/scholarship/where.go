// Code generated by entc, DO NOT EDIT.

package scholarship

import (
	"Kynesia/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// StartStepOne applies equality check predicate on the "startStepOne" field. It's identical to StartStepOneEQ.
func StartStepOne(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartStepOne), v))
	})
}

// StartStepTwo applies equality check predicate on the "startStepTwo" field. It's identical to StartStepTwoEQ.
func StartStepTwo(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartStepTwo), v))
	})
}

// EndStepOne applies equality check predicate on the "endStepOne" field. It's identical to EndStepOneEQ.
func EndStepOne(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndStepOne), v))
	})
}

// EndStepTwo applies equality check predicate on the "endStepTwo" field. It's identical to EndStepTwoEQ.
func EndStepTwo(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndStepTwo), v))
	})
}

// AnnounceStepOne applies equality check predicate on the "announceStepOne" field. It's identical to AnnounceStepOneEQ.
func AnnounceStepOne(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnnounceStepOne), v))
	})
}

// AnnounceStepTwo applies equality check predicate on the "announceStepTwo" field. It's identical to AnnounceStepTwoEQ.
func AnnounceStepTwo(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnnounceStepTwo), v))
	})
}

// OnlineTest applies equality check predicate on the "onlineTest" field. It's identical to OnlineTestEQ.
func OnlineTest(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOnlineTest), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Scholarship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Scholarship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Scholarship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Scholarship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// StartStepOneEQ applies the EQ predicate on the "startStepOne" field.
func StartStepOneEQ(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartStepOne), v))
	})
}

// StartStepOneNEQ applies the NEQ predicate on the "startStepOne" field.
func StartStepOneNEQ(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartStepOne), v))
	})
}

// StartStepOneIn applies the In predicate on the "startStepOne" field.
func StartStepOneIn(vs ...time.Time) predicate.Scholarship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Scholarship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStartStepOne), v...))
	})
}

// StartStepOneNotIn applies the NotIn predicate on the "startStepOne" field.
func StartStepOneNotIn(vs ...time.Time) predicate.Scholarship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Scholarship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStartStepOne), v...))
	})
}

// StartStepOneGT applies the GT predicate on the "startStepOne" field.
func StartStepOneGT(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartStepOne), v))
	})
}

// StartStepOneGTE applies the GTE predicate on the "startStepOne" field.
func StartStepOneGTE(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartStepOne), v))
	})
}

// StartStepOneLT applies the LT predicate on the "startStepOne" field.
func StartStepOneLT(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartStepOne), v))
	})
}

// StartStepOneLTE applies the LTE predicate on the "startStepOne" field.
func StartStepOneLTE(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartStepOne), v))
	})
}

// StartStepTwoEQ applies the EQ predicate on the "startStepTwo" field.
func StartStepTwoEQ(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartStepTwo), v))
	})
}

// StartStepTwoNEQ applies the NEQ predicate on the "startStepTwo" field.
func StartStepTwoNEQ(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartStepTwo), v))
	})
}

// StartStepTwoIn applies the In predicate on the "startStepTwo" field.
func StartStepTwoIn(vs ...time.Time) predicate.Scholarship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Scholarship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStartStepTwo), v...))
	})
}

// StartStepTwoNotIn applies the NotIn predicate on the "startStepTwo" field.
func StartStepTwoNotIn(vs ...time.Time) predicate.Scholarship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Scholarship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStartStepTwo), v...))
	})
}

// StartStepTwoGT applies the GT predicate on the "startStepTwo" field.
func StartStepTwoGT(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartStepTwo), v))
	})
}

// StartStepTwoGTE applies the GTE predicate on the "startStepTwo" field.
func StartStepTwoGTE(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartStepTwo), v))
	})
}

// StartStepTwoLT applies the LT predicate on the "startStepTwo" field.
func StartStepTwoLT(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartStepTwo), v))
	})
}

// StartStepTwoLTE applies the LTE predicate on the "startStepTwo" field.
func StartStepTwoLTE(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartStepTwo), v))
	})
}

// EndStepOneEQ applies the EQ predicate on the "endStepOne" field.
func EndStepOneEQ(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndStepOne), v))
	})
}

// EndStepOneNEQ applies the NEQ predicate on the "endStepOne" field.
func EndStepOneNEQ(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndStepOne), v))
	})
}

// EndStepOneIn applies the In predicate on the "endStepOne" field.
func EndStepOneIn(vs ...time.Time) predicate.Scholarship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Scholarship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEndStepOne), v...))
	})
}

// EndStepOneNotIn applies the NotIn predicate on the "endStepOne" field.
func EndStepOneNotIn(vs ...time.Time) predicate.Scholarship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Scholarship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEndStepOne), v...))
	})
}

// EndStepOneGT applies the GT predicate on the "endStepOne" field.
func EndStepOneGT(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndStepOne), v))
	})
}

// EndStepOneGTE applies the GTE predicate on the "endStepOne" field.
func EndStepOneGTE(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndStepOne), v))
	})
}

// EndStepOneLT applies the LT predicate on the "endStepOne" field.
func EndStepOneLT(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndStepOne), v))
	})
}

// EndStepOneLTE applies the LTE predicate on the "endStepOne" field.
func EndStepOneLTE(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndStepOne), v))
	})
}

// EndStepTwoEQ applies the EQ predicate on the "endStepTwo" field.
func EndStepTwoEQ(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndStepTwo), v))
	})
}

// EndStepTwoNEQ applies the NEQ predicate on the "endStepTwo" field.
func EndStepTwoNEQ(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndStepTwo), v))
	})
}

// EndStepTwoIn applies the In predicate on the "endStepTwo" field.
func EndStepTwoIn(vs ...time.Time) predicate.Scholarship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Scholarship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEndStepTwo), v...))
	})
}

// EndStepTwoNotIn applies the NotIn predicate on the "endStepTwo" field.
func EndStepTwoNotIn(vs ...time.Time) predicate.Scholarship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Scholarship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEndStepTwo), v...))
	})
}

// EndStepTwoGT applies the GT predicate on the "endStepTwo" field.
func EndStepTwoGT(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndStepTwo), v))
	})
}

// EndStepTwoGTE applies the GTE predicate on the "endStepTwo" field.
func EndStepTwoGTE(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndStepTwo), v))
	})
}

// EndStepTwoLT applies the LT predicate on the "endStepTwo" field.
func EndStepTwoLT(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndStepTwo), v))
	})
}

// EndStepTwoLTE applies the LTE predicate on the "endStepTwo" field.
func EndStepTwoLTE(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndStepTwo), v))
	})
}

// AnnounceStepOneEQ applies the EQ predicate on the "announceStepOne" field.
func AnnounceStepOneEQ(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnnounceStepOne), v))
	})
}

// AnnounceStepOneNEQ applies the NEQ predicate on the "announceStepOne" field.
func AnnounceStepOneNEQ(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAnnounceStepOne), v))
	})
}

// AnnounceStepOneIn applies the In predicate on the "announceStepOne" field.
func AnnounceStepOneIn(vs ...time.Time) predicate.Scholarship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Scholarship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAnnounceStepOne), v...))
	})
}

// AnnounceStepOneNotIn applies the NotIn predicate on the "announceStepOne" field.
func AnnounceStepOneNotIn(vs ...time.Time) predicate.Scholarship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Scholarship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAnnounceStepOne), v...))
	})
}

// AnnounceStepOneGT applies the GT predicate on the "announceStepOne" field.
func AnnounceStepOneGT(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAnnounceStepOne), v))
	})
}

// AnnounceStepOneGTE applies the GTE predicate on the "announceStepOne" field.
func AnnounceStepOneGTE(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAnnounceStepOne), v))
	})
}

// AnnounceStepOneLT applies the LT predicate on the "announceStepOne" field.
func AnnounceStepOneLT(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAnnounceStepOne), v))
	})
}

// AnnounceStepOneLTE applies the LTE predicate on the "announceStepOne" field.
func AnnounceStepOneLTE(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAnnounceStepOne), v))
	})
}

// AnnounceStepTwoEQ applies the EQ predicate on the "announceStepTwo" field.
func AnnounceStepTwoEQ(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnnounceStepTwo), v))
	})
}

// AnnounceStepTwoNEQ applies the NEQ predicate on the "announceStepTwo" field.
func AnnounceStepTwoNEQ(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAnnounceStepTwo), v))
	})
}

// AnnounceStepTwoIn applies the In predicate on the "announceStepTwo" field.
func AnnounceStepTwoIn(vs ...time.Time) predicate.Scholarship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Scholarship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAnnounceStepTwo), v...))
	})
}

// AnnounceStepTwoNotIn applies the NotIn predicate on the "announceStepTwo" field.
func AnnounceStepTwoNotIn(vs ...time.Time) predicate.Scholarship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Scholarship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAnnounceStepTwo), v...))
	})
}

// AnnounceStepTwoGT applies the GT predicate on the "announceStepTwo" field.
func AnnounceStepTwoGT(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAnnounceStepTwo), v))
	})
}

// AnnounceStepTwoGTE applies the GTE predicate on the "announceStepTwo" field.
func AnnounceStepTwoGTE(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAnnounceStepTwo), v))
	})
}

// AnnounceStepTwoLT applies the LT predicate on the "announceStepTwo" field.
func AnnounceStepTwoLT(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAnnounceStepTwo), v))
	})
}

// AnnounceStepTwoLTE applies the LTE predicate on the "announceStepTwo" field.
func AnnounceStepTwoLTE(v time.Time) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAnnounceStepTwo), v))
	})
}

// OnlineTestEQ applies the EQ predicate on the "onlineTest" field.
func OnlineTestEQ(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOnlineTest), v))
	})
}

// OnlineTestNEQ applies the NEQ predicate on the "onlineTest" field.
func OnlineTestNEQ(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOnlineTest), v))
	})
}

// OnlineTestIn applies the In predicate on the "onlineTest" field.
func OnlineTestIn(vs ...string) predicate.Scholarship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Scholarship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldOnlineTest), v...))
	})
}

// OnlineTestNotIn applies the NotIn predicate on the "onlineTest" field.
func OnlineTestNotIn(vs ...string) predicate.Scholarship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Scholarship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldOnlineTest), v...))
	})
}

// OnlineTestGT applies the GT predicate on the "onlineTest" field.
func OnlineTestGT(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldOnlineTest), v))
	})
}

// OnlineTestGTE applies the GTE predicate on the "onlineTest" field.
func OnlineTestGTE(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldOnlineTest), v))
	})
}

// OnlineTestLT applies the LT predicate on the "onlineTest" field.
func OnlineTestLT(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldOnlineTest), v))
	})
}

// OnlineTestLTE applies the LTE predicate on the "onlineTest" field.
func OnlineTestLTE(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldOnlineTest), v))
	})
}

// OnlineTestContains applies the Contains predicate on the "onlineTest" field.
func OnlineTestContains(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldOnlineTest), v))
	})
}

// OnlineTestHasPrefix applies the HasPrefix predicate on the "onlineTest" field.
func OnlineTestHasPrefix(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldOnlineTest), v))
	})
}

// OnlineTestHasSuffix applies the HasSuffix predicate on the "onlineTest" field.
func OnlineTestHasSuffix(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldOnlineTest), v))
	})
}

// OnlineTestEqualFold applies the EqualFold predicate on the "onlineTest" field.
func OnlineTestEqualFold(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldOnlineTest), v))
	})
}

// OnlineTestContainsFold applies the ContainsFold predicate on the "onlineTest" field.
func OnlineTestContainsFold(v string) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldOnlineTest), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.Scholarship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Scholarship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.Scholarship {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Scholarship(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// HasRegisters applies the HasEdge predicate on the "registers" edge.
func HasRegisters() predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RegistersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RegistersTable, RegistersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRegistersWith applies the HasEdge predicate on the "registers" edge with a given conditions (other predicates).
func HasRegistersWith(preds ...predicate.Register) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RegistersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RegistersTable, RegistersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Scholarship) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Scholarship) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Scholarship) predicate.Scholarship {
	return predicate.Scholarship(func(s *sql.Selector) {
		p(s.Not())
	})
}
