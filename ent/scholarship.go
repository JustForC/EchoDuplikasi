// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Kynesia/ent/scholarship"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Scholarship is the model entity for the Scholarship schema.
type Scholarship struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// StartStepOne holds the value of the "startStepOne" field.
	StartStepOne time.Time `json:"startStepOne,omitempty"`
	// StartStepTwo holds the value of the "startStepTwo" field.
	StartStepTwo time.Time `json:"startStepTwo,omitempty"`
	// EndStepOne holds the value of the "endStepOne" field.
	EndStepOne time.Time `json:"endStepOne,omitempty"`
	// EndStepTwo holds the value of the "endStepTwo" field.
	EndStepTwo time.Time `json:"endStepTwo,omitempty"`
	// AnnounceStepOne holds the value of the "announceStepOne" field.
	AnnounceStepOne time.Time `json:"announceStepOne,omitempty"`
	// AnnounceStepTwo holds the value of the "announceStepTwo" field.
	AnnounceStepTwo time.Time `json:"announceStepTwo,omitempty"`
	// OnlineTest holds the value of the "onlineTest" field.
	OnlineTest string `json:"onlineTest,omitempty"`
	// Status holds the value of the "status" field.
	Status int `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ScholarshipQuery when eager-loading is set.
	Edges ScholarshipEdges `json:"edges"`
}

// ScholarshipEdges holds the relations/edges for other nodes in the graph.
type ScholarshipEdges struct {
	// Registers holds the value of the registers edge.
	Registers []*Register `json:"registers,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RegistersOrErr returns the Registers value or an error if the edge
// was not loaded in eager-loading.
func (e ScholarshipEdges) RegistersOrErr() ([]*Register, error) {
	if e.loadedTypes[0] {
		return e.Registers, nil
	}
	return nil, &NotLoadedError{edge: "registers"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Scholarship) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case scholarship.FieldID, scholarship.FieldStatus:
			values[i] = new(sql.NullInt64)
		case scholarship.FieldName, scholarship.FieldOnlineTest:
			values[i] = new(sql.NullString)
		case scholarship.FieldStartStepOne, scholarship.FieldStartStepTwo, scholarship.FieldEndStepOne, scholarship.FieldEndStepTwo, scholarship.FieldAnnounceStepOne, scholarship.FieldAnnounceStepTwo:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Scholarship", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Scholarship fields.
func (s *Scholarship) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case scholarship.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case scholarship.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				s.Name = value.String
			}
		case scholarship.FieldStartStepOne:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field startStepOne", values[i])
			} else if value.Valid {
				s.StartStepOne = value.Time
			}
		case scholarship.FieldStartStepTwo:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field startStepTwo", values[i])
			} else if value.Valid {
				s.StartStepTwo = value.Time
			}
		case scholarship.FieldEndStepOne:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field endStepOne", values[i])
			} else if value.Valid {
				s.EndStepOne = value.Time
			}
		case scholarship.FieldEndStepTwo:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field endStepTwo", values[i])
			} else if value.Valid {
				s.EndStepTwo = value.Time
			}
		case scholarship.FieldAnnounceStepOne:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field announceStepOne", values[i])
			} else if value.Valid {
				s.AnnounceStepOne = value.Time
			}
		case scholarship.FieldAnnounceStepTwo:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field announceStepTwo", values[i])
			} else if value.Valid {
				s.AnnounceStepTwo = value.Time
			}
		case scholarship.FieldOnlineTest:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field onlineTest", values[i])
			} else if value.Valid {
				s.OnlineTest = value.String
			}
		case scholarship.FieldStatus:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				s.Status = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryRegisters queries the "registers" edge of the Scholarship entity.
func (s *Scholarship) QueryRegisters() *RegisterQuery {
	return (&ScholarshipClient{config: s.config}).QueryRegisters(s)
}

// Update returns a builder for updating this Scholarship.
// Note that you need to call Scholarship.Unwrap() before calling this method if this Scholarship
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Scholarship) Update() *ScholarshipUpdateOne {
	return (&ScholarshipClient{config: s.config}).UpdateOne(s)
}

// Unwrap unwraps the Scholarship entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Scholarship) Unwrap() *Scholarship {
	tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: Scholarship is not a transactional entity")
	}
	s.config.driver = tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Scholarship) String() string {
	var builder strings.Builder
	builder.WriteString("Scholarship(")
	builder.WriteString(fmt.Sprintf("id=%v", s.ID))
	builder.WriteString(", name=")
	builder.WriteString(s.Name)
	builder.WriteString(", startStepOne=")
	builder.WriteString(s.StartStepOne.Format(time.ANSIC))
	builder.WriteString(", startStepTwo=")
	builder.WriteString(s.StartStepTwo.Format(time.ANSIC))
	builder.WriteString(", endStepOne=")
	builder.WriteString(s.EndStepOne.Format(time.ANSIC))
	builder.WriteString(", endStepTwo=")
	builder.WriteString(s.EndStepTwo.Format(time.ANSIC))
	builder.WriteString(", announceStepOne=")
	builder.WriteString(s.AnnounceStepOne.Format(time.ANSIC))
	builder.WriteString(", announceStepTwo=")
	builder.WriteString(s.AnnounceStepTwo.Format(time.ANSIC))
	builder.WriteString(", onlineTest=")
	builder.WriteString(s.OnlineTest)
	builder.WriteString(", status=")
	builder.WriteString(fmt.Sprintf("%v", s.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Scholarships is a parsable slice of Scholarship.
type Scholarships []*Scholarship

func (s Scholarships) config(cfg config) {
	for _i := range s {
		s[_i].config = cfg
	}
}
