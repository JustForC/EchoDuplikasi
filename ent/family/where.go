// Code generated by entc, DO NOT EDIT.

package family

import (
	"Kynesia/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// Birthplace applies equality check predicate on the "birthplace" field. It's identical to BirthplaceEQ.
func Birthplace(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthplace), v))
	})
}

// Birthdate applies equality check predicate on the "birthdate" field. It's identical to BirthdateEQ.
func Birthdate(v time.Time) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthdate), v))
	})
}

// Education applies equality check predicate on the "education" field. It's identical to EducationEQ.
func Education(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEducation), v))
	})
}

// Job applies equality check predicate on the "job" field. It's identical to JobEQ.
func Job(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJob), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.Family {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Family(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.Family {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Family(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatus), v))
	})
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatus), v))
	})
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatus), v))
	})
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatus), v))
	})
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatus), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Family {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Family(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Family {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Family(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGender), v))
	})
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...string) predicate.Family {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Family(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGender), v...))
	})
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...string) predicate.Family {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Family(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGender), v...))
	})
}

// GenderGT applies the GT predicate on the "gender" field.
func GenderGT(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGender), v))
	})
}

// GenderGTE applies the GTE predicate on the "gender" field.
func GenderGTE(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGender), v))
	})
}

// GenderLT applies the LT predicate on the "gender" field.
func GenderLT(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGender), v))
	})
}

// GenderLTE applies the LTE predicate on the "gender" field.
func GenderLTE(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGender), v))
	})
}

// GenderContains applies the Contains predicate on the "gender" field.
func GenderContains(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldGender), v))
	})
}

// GenderHasPrefix applies the HasPrefix predicate on the "gender" field.
func GenderHasPrefix(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldGender), v))
	})
}

// GenderHasSuffix applies the HasSuffix predicate on the "gender" field.
func GenderHasSuffix(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldGender), v))
	})
}

// GenderEqualFold applies the EqualFold predicate on the "gender" field.
func GenderEqualFold(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldGender), v))
	})
}

// GenderContainsFold applies the ContainsFold predicate on the "gender" field.
func GenderContainsFold(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldGender), v))
	})
}

// BirthplaceEQ applies the EQ predicate on the "birthplace" field.
func BirthplaceEQ(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthplace), v))
	})
}

// BirthplaceNEQ applies the NEQ predicate on the "birthplace" field.
func BirthplaceNEQ(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBirthplace), v))
	})
}

// BirthplaceIn applies the In predicate on the "birthplace" field.
func BirthplaceIn(vs ...string) predicate.Family {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Family(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBirthplace), v...))
	})
}

// BirthplaceNotIn applies the NotIn predicate on the "birthplace" field.
func BirthplaceNotIn(vs ...string) predicate.Family {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Family(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBirthplace), v...))
	})
}

// BirthplaceGT applies the GT predicate on the "birthplace" field.
func BirthplaceGT(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBirthplace), v))
	})
}

// BirthplaceGTE applies the GTE predicate on the "birthplace" field.
func BirthplaceGTE(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBirthplace), v))
	})
}

// BirthplaceLT applies the LT predicate on the "birthplace" field.
func BirthplaceLT(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBirthplace), v))
	})
}

// BirthplaceLTE applies the LTE predicate on the "birthplace" field.
func BirthplaceLTE(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBirthplace), v))
	})
}

// BirthplaceContains applies the Contains predicate on the "birthplace" field.
func BirthplaceContains(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBirthplace), v))
	})
}

// BirthplaceHasPrefix applies the HasPrefix predicate on the "birthplace" field.
func BirthplaceHasPrefix(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBirthplace), v))
	})
}

// BirthplaceHasSuffix applies the HasSuffix predicate on the "birthplace" field.
func BirthplaceHasSuffix(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBirthplace), v))
	})
}

// BirthplaceEqualFold applies the EqualFold predicate on the "birthplace" field.
func BirthplaceEqualFold(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBirthplace), v))
	})
}

// BirthplaceContainsFold applies the ContainsFold predicate on the "birthplace" field.
func BirthplaceContainsFold(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBirthplace), v))
	})
}

// BirthdateEQ applies the EQ predicate on the "birthdate" field.
func BirthdateEQ(v time.Time) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthdate), v))
	})
}

// BirthdateNEQ applies the NEQ predicate on the "birthdate" field.
func BirthdateNEQ(v time.Time) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBirthdate), v))
	})
}

// BirthdateIn applies the In predicate on the "birthdate" field.
func BirthdateIn(vs ...time.Time) predicate.Family {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Family(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBirthdate), v...))
	})
}

// BirthdateNotIn applies the NotIn predicate on the "birthdate" field.
func BirthdateNotIn(vs ...time.Time) predicate.Family {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Family(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBirthdate), v...))
	})
}

// BirthdateGT applies the GT predicate on the "birthdate" field.
func BirthdateGT(v time.Time) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBirthdate), v))
	})
}

// BirthdateGTE applies the GTE predicate on the "birthdate" field.
func BirthdateGTE(v time.Time) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBirthdate), v))
	})
}

// BirthdateLT applies the LT predicate on the "birthdate" field.
func BirthdateLT(v time.Time) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBirthdate), v))
	})
}

// BirthdateLTE applies the LTE predicate on the "birthdate" field.
func BirthdateLTE(v time.Time) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBirthdate), v))
	})
}

// EducationEQ applies the EQ predicate on the "education" field.
func EducationEQ(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEducation), v))
	})
}

// EducationNEQ applies the NEQ predicate on the "education" field.
func EducationNEQ(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEducation), v))
	})
}

// EducationIn applies the In predicate on the "education" field.
func EducationIn(vs ...string) predicate.Family {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Family(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldEducation), v...))
	})
}

// EducationNotIn applies the NotIn predicate on the "education" field.
func EducationNotIn(vs ...string) predicate.Family {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Family(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldEducation), v...))
	})
}

// EducationGT applies the GT predicate on the "education" field.
func EducationGT(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEducation), v))
	})
}

// EducationGTE applies the GTE predicate on the "education" field.
func EducationGTE(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEducation), v))
	})
}

// EducationLT applies the LT predicate on the "education" field.
func EducationLT(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEducation), v))
	})
}

// EducationLTE applies the LTE predicate on the "education" field.
func EducationLTE(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEducation), v))
	})
}

// EducationContains applies the Contains predicate on the "education" field.
func EducationContains(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEducation), v))
	})
}

// EducationHasPrefix applies the HasPrefix predicate on the "education" field.
func EducationHasPrefix(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEducation), v))
	})
}

// EducationHasSuffix applies the HasSuffix predicate on the "education" field.
func EducationHasSuffix(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEducation), v))
	})
}

// EducationEqualFold applies the EqualFold predicate on the "education" field.
func EducationEqualFold(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEducation), v))
	})
}

// EducationContainsFold applies the ContainsFold predicate on the "education" field.
func EducationContainsFold(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEducation), v))
	})
}

// JobEQ applies the EQ predicate on the "job" field.
func JobEQ(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldJob), v))
	})
}

// JobNEQ applies the NEQ predicate on the "job" field.
func JobNEQ(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldJob), v))
	})
}

// JobIn applies the In predicate on the "job" field.
func JobIn(vs ...string) predicate.Family {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Family(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldJob), v...))
	})
}

// JobNotIn applies the NotIn predicate on the "job" field.
func JobNotIn(vs ...string) predicate.Family {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Family(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldJob), v...))
	})
}

// JobGT applies the GT predicate on the "job" field.
func JobGT(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldJob), v))
	})
}

// JobGTE applies the GTE predicate on the "job" field.
func JobGTE(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldJob), v))
	})
}

// JobLT applies the LT predicate on the "job" field.
func JobLT(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldJob), v))
	})
}

// JobLTE applies the LTE predicate on the "job" field.
func JobLTE(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldJob), v))
	})
}

// JobContains applies the Contains predicate on the "job" field.
func JobContains(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldJob), v))
	})
}

// JobHasPrefix applies the HasPrefix predicate on the "job" field.
func JobHasPrefix(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldJob), v))
	})
}

// JobHasSuffix applies the HasSuffix predicate on the "job" field.
func JobHasSuffix(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldJob), v))
	})
}

// JobEqualFold applies the EqualFold predicate on the "job" field.
func JobEqualFold(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldJob), v))
	})
}

// JobContainsFold applies the ContainsFold predicate on the "job" field.
func JobContainsFold(v string) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldJob), v))
	})
}

// HasRegister applies the HasEdge predicate on the "register" edge.
func HasRegister() predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RegisterTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RegisterTable, RegisterPrimaryKey...),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRegisterWith applies the HasEdge predicate on the "register" edge with a given conditions (other predicates).
func HasRegisterWith(preds ...predicate.Register) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RegisterInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, RegisterTable, RegisterPrimaryKey...),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Family) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Family) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Family) predicate.Family {
	return predicate.Family(func(s *sql.Selector) {
		p(s.Not())
	})
}
