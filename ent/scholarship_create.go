// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Kynesia/ent/register"
	"Kynesia/ent/scholarship"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ScholarshipCreate is the builder for creating a Scholarship entity.
type ScholarshipCreate struct {
	config
	mutation *ScholarshipMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (sc *ScholarshipCreate) SetName(s string) *ScholarshipCreate {
	sc.mutation.SetName(s)
	return sc
}

// SetStartStepOne sets the "startStepOne" field.
func (sc *ScholarshipCreate) SetStartStepOne(t time.Time) *ScholarshipCreate {
	sc.mutation.SetStartStepOne(t)
	return sc
}

// SetStartStepTwo sets the "startStepTwo" field.
func (sc *ScholarshipCreate) SetStartStepTwo(t time.Time) *ScholarshipCreate {
	sc.mutation.SetStartStepTwo(t)
	return sc
}

// SetEndStepOne sets the "endStepOne" field.
func (sc *ScholarshipCreate) SetEndStepOne(t time.Time) *ScholarshipCreate {
	sc.mutation.SetEndStepOne(t)
	return sc
}

// SetEndStepTwo sets the "endStepTwo" field.
func (sc *ScholarshipCreate) SetEndStepTwo(t time.Time) *ScholarshipCreate {
	sc.mutation.SetEndStepTwo(t)
	return sc
}

// SetAnnounceStepOne sets the "announceStepOne" field.
func (sc *ScholarshipCreate) SetAnnounceStepOne(t time.Time) *ScholarshipCreate {
	sc.mutation.SetAnnounceStepOne(t)
	return sc
}

// SetAnnounceStepTwo sets the "announceStepTwo" field.
func (sc *ScholarshipCreate) SetAnnounceStepTwo(t time.Time) *ScholarshipCreate {
	sc.mutation.SetAnnounceStepTwo(t)
	return sc
}

// SetOnlineTest sets the "onlineTest" field.
func (sc *ScholarshipCreate) SetOnlineTest(s string) *ScholarshipCreate {
	sc.mutation.SetOnlineTest(s)
	return sc
}

// SetStatus sets the "status" field.
func (sc *ScholarshipCreate) SetStatus(i int) *ScholarshipCreate {
	sc.mutation.SetStatus(i)
	return sc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sc *ScholarshipCreate) SetNillableStatus(i *int) *ScholarshipCreate {
	if i != nil {
		sc.SetStatus(*i)
	}
	return sc
}

// AddRegisterIDs adds the "register" edge to the Register entity by IDs.
func (sc *ScholarshipCreate) AddRegisterIDs(ids ...int) *ScholarshipCreate {
	sc.mutation.AddRegisterIDs(ids...)
	return sc
}

// AddRegister adds the "register" edges to the Register entity.
func (sc *ScholarshipCreate) AddRegister(r ...*Register) *ScholarshipCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return sc.AddRegisterIDs(ids...)
}

// Mutation returns the ScholarshipMutation object of the builder.
func (sc *ScholarshipCreate) Mutation() *ScholarshipMutation {
	return sc.mutation
}

// Save creates the Scholarship in the database.
func (sc *ScholarshipCreate) Save(ctx context.Context) (*Scholarship, error) {
	var (
		err  error
		node *Scholarship
	)
	sc.defaults()
	if len(sc.hooks) == 0 {
		if err = sc.check(); err != nil {
			return nil, err
		}
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ScholarshipMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = sc.check(); err != nil {
				return nil, err
			}
			sc.mutation = mutation
			if node, err = sc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			if sc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ScholarshipCreate) SaveX(ctx context.Context) *Scholarship {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ScholarshipCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ScholarshipCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ScholarshipCreate) defaults() {
	if _, ok := sc.mutation.Status(); !ok {
		v := scholarship.DefaultStatus
		sc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ScholarshipCreate) check() error {
	if _, ok := sc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Scholarship.name"`)}
	}
	if _, ok := sc.mutation.StartStepOne(); !ok {
		return &ValidationError{Name: "startStepOne", err: errors.New(`ent: missing required field "Scholarship.startStepOne"`)}
	}
	if _, ok := sc.mutation.StartStepTwo(); !ok {
		return &ValidationError{Name: "startStepTwo", err: errors.New(`ent: missing required field "Scholarship.startStepTwo"`)}
	}
	if _, ok := sc.mutation.EndStepOne(); !ok {
		return &ValidationError{Name: "endStepOne", err: errors.New(`ent: missing required field "Scholarship.endStepOne"`)}
	}
	if _, ok := sc.mutation.EndStepTwo(); !ok {
		return &ValidationError{Name: "endStepTwo", err: errors.New(`ent: missing required field "Scholarship.endStepTwo"`)}
	}
	if _, ok := sc.mutation.AnnounceStepOne(); !ok {
		return &ValidationError{Name: "announceStepOne", err: errors.New(`ent: missing required field "Scholarship.announceStepOne"`)}
	}
	if _, ok := sc.mutation.AnnounceStepTwo(); !ok {
		return &ValidationError{Name: "announceStepTwo", err: errors.New(`ent: missing required field "Scholarship.announceStepTwo"`)}
	}
	if _, ok := sc.mutation.OnlineTest(); !ok {
		return &ValidationError{Name: "onlineTest", err: errors.New(`ent: missing required field "Scholarship.onlineTest"`)}
	}
	if _, ok := sc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Scholarship.status"`)}
	}
	return nil
}

func (sc *ScholarshipCreate) sqlSave(ctx context.Context) (*Scholarship, error) {
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (sc *ScholarshipCreate) createSpec() (*Scholarship, *sqlgraph.CreateSpec) {
	var (
		_node = &Scholarship{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: scholarship.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: scholarship.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: scholarship.FieldName,
		})
		_node.Name = value
	}
	if value, ok := sc.mutation.StartStepOne(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scholarship.FieldStartStepOne,
		})
		_node.StartStepOne = value
	}
	if value, ok := sc.mutation.StartStepTwo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scholarship.FieldStartStepTwo,
		})
		_node.StartStepTwo = value
	}
	if value, ok := sc.mutation.EndStepOne(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scholarship.FieldEndStepOne,
		})
		_node.EndStepOne = value
	}
	if value, ok := sc.mutation.EndStepTwo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scholarship.FieldEndStepTwo,
		})
		_node.EndStepTwo = value
	}
	if value, ok := sc.mutation.AnnounceStepOne(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scholarship.FieldAnnounceStepOne,
		})
		_node.AnnounceStepOne = value
	}
	if value, ok := sc.mutation.AnnounceStepTwo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: scholarship.FieldAnnounceStepTwo,
		})
		_node.AnnounceStepTwo = value
	}
	if value, ok := sc.mutation.OnlineTest(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: scholarship.FieldOnlineTest,
		})
		_node.OnlineTest = value
	}
	if value, ok := sc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: scholarship.FieldStatus,
		})
		_node.Status = value
	}
	if nodes := sc.mutation.RegisterIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   scholarship.RegisterTable,
			Columns: scholarship.RegisterPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: register.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ScholarshipCreateBulk is the builder for creating many Scholarship entities in bulk.
type ScholarshipCreateBulk struct {
	config
	builders []*ScholarshipCreate
}

// Save creates the Scholarship entities in the database.
func (scb *ScholarshipCreateBulk) Save(ctx context.Context) ([]*Scholarship, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Scholarship, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScholarshipMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ScholarshipCreateBulk) SaveX(ctx context.Context) []*Scholarship {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ScholarshipCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ScholarshipCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
