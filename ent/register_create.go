// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Kynesia/ent/achievement"
	"Kynesia/ent/biodata"
	"Kynesia/ent/education"
	"Kynesia/ent/family"
	"Kynesia/ent/register"
	"Kynesia/ent/scholarship"
	"Kynesia/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RegisterCreate is the builder for creating a Register entity.
type RegisterCreate struct {
	config
	mutation *RegisterMutation
	hooks    []Hook
}

// SetStatusOne sets the "statusOne" field.
func (rc *RegisterCreate) SetStatusOne(i int) *RegisterCreate {
	rc.mutation.SetStatusOne(i)
	return rc
}

// SetStatusTwo sets the "statusTwo" field.
func (rc *RegisterCreate) SetStatusTwo(i int) *RegisterCreate {
	rc.mutation.SetStatusTwo(i)
	return rc
}

// SetNillableStatusTwo sets the "statusTwo" field if the given value is not nil.
func (rc *RegisterCreate) SetNillableStatusTwo(i *int) *RegisterCreate {
	if i != nil {
		rc.SetStatusTwo(*i)
	}
	return rc
}

// SetOnlineInterview sets the "onlineInterview" field.
func (rc *RegisterCreate) SetOnlineInterview(s string) *RegisterCreate {
	rc.mutation.SetOnlineInterview(s)
	return rc
}

// SetNillableOnlineInterview sets the "onlineInterview" field if the given value is not nil.
func (rc *RegisterCreate) SetNillableOnlineInterview(s *string) *RegisterCreate {
	if s != nil {
		rc.SetOnlineInterview(*s)
	}
	return rc
}

// SetInterviewTime sets the "interviewTime" field.
func (rc *RegisterCreate) SetInterviewTime(t time.Time) *RegisterCreate {
	rc.mutation.SetInterviewTime(t)
	return rc
}

// SetNillableInterviewTime sets the "interviewTime" field if the given value is not nil.
func (rc *RegisterCreate) SetNillableInterviewTime(t *time.Time) *RegisterCreate {
	if t != nil {
		rc.SetInterviewTime(*t)
	}
	return rc
}

// AddUserIDs adds the "user" edge to the User entity by IDs.
func (rc *RegisterCreate) AddUserIDs(ids ...int) *RegisterCreate {
	rc.mutation.AddUserIDs(ids...)
	return rc
}

// AddUser adds the "user" edges to the User entity.
func (rc *RegisterCreate) AddUser(u ...*User) *RegisterCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return rc.AddUserIDs(ids...)
}

// AddScholarshipIDs adds the "scholarship" edge to the Scholarship entity by IDs.
func (rc *RegisterCreate) AddScholarshipIDs(ids ...int) *RegisterCreate {
	rc.mutation.AddScholarshipIDs(ids...)
	return rc
}

// AddScholarship adds the "scholarship" edges to the Scholarship entity.
func (rc *RegisterCreate) AddScholarship(s ...*Scholarship) *RegisterCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return rc.AddScholarshipIDs(ids...)
}

// AddAchievementIDs adds the "achievement" edge to the Achievement entity by IDs.
func (rc *RegisterCreate) AddAchievementIDs(ids ...int) *RegisterCreate {
	rc.mutation.AddAchievementIDs(ids...)
	return rc
}

// AddAchievement adds the "achievement" edges to the Achievement entity.
func (rc *RegisterCreate) AddAchievement(a ...*Achievement) *RegisterCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return rc.AddAchievementIDs(ids...)
}

// AddBiodatumIDs adds the "biodata" edge to the Biodata entity by IDs.
func (rc *RegisterCreate) AddBiodatumIDs(ids ...int) *RegisterCreate {
	rc.mutation.AddBiodatumIDs(ids...)
	return rc
}

// AddBiodata adds the "biodata" edges to the Biodata entity.
func (rc *RegisterCreate) AddBiodata(b ...*Biodata) *RegisterCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return rc.AddBiodatumIDs(ids...)
}

// AddEducationIDs adds the "education" edge to the Education entity by IDs.
func (rc *RegisterCreate) AddEducationIDs(ids ...int) *RegisterCreate {
	rc.mutation.AddEducationIDs(ids...)
	return rc
}

// AddEducation adds the "education" edges to the Education entity.
func (rc *RegisterCreate) AddEducation(e ...*Education) *RegisterCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return rc.AddEducationIDs(ids...)
}

// AddFamilyIDs adds the "family" edge to the Family entity by IDs.
func (rc *RegisterCreate) AddFamilyIDs(ids ...int) *RegisterCreate {
	rc.mutation.AddFamilyIDs(ids...)
	return rc
}

// AddFamily adds the "family" edges to the Family entity.
func (rc *RegisterCreate) AddFamily(f ...*Family) *RegisterCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return rc.AddFamilyIDs(ids...)
}

// Mutation returns the RegisterMutation object of the builder.
func (rc *RegisterCreate) Mutation() *RegisterMutation {
	return rc.mutation
}

// Save creates the Register in the database.
func (rc *RegisterCreate) Save(ctx context.Context) (*Register, error) {
	var (
		err  error
		node *Register
	)
	rc.defaults()
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RegisterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RegisterCreate) SaveX(ctx context.Context) *Register {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RegisterCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RegisterCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RegisterCreate) defaults() {
	if _, ok := rc.mutation.StatusTwo(); !ok {
		v := register.DefaultStatusTwo
		rc.mutation.SetStatusTwo(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RegisterCreate) check() error {
	if _, ok := rc.mutation.StatusOne(); !ok {
		return &ValidationError{Name: "statusOne", err: errors.New(`ent: missing required field "Register.statusOne"`)}
	}
	if _, ok := rc.mutation.StatusTwo(); !ok {
		return &ValidationError{Name: "statusTwo", err: errors.New(`ent: missing required field "Register.statusTwo"`)}
	}
	return nil
}

func (rc *RegisterCreate) sqlSave(ctx context.Context) (*Register, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (rc *RegisterCreate) createSpec() (*Register, *sqlgraph.CreateSpec) {
	var (
		_node = &Register{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: register.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: register.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.StatusOne(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: register.FieldStatusOne,
		})
		_node.StatusOne = value
	}
	if value, ok := rc.mutation.StatusTwo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: register.FieldStatusTwo,
		})
		_node.StatusTwo = value
	}
	if value, ok := rc.mutation.OnlineInterview(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: register.FieldOnlineInterview,
		})
		_node.OnlineInterview = &value
	}
	if value, ok := rc.mutation.InterviewTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: register.FieldInterviewTime,
		})
		_node.InterviewTime = &value
	}
	if nodes := rc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   register.UserTable,
			Columns: register.UserPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ScholarshipIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   register.ScholarshipTable,
			Columns: register.ScholarshipPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: scholarship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.AchievementIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.AchievementTable,
			Columns: register.AchievementPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: achievement.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.BiodataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.BiodataTable,
			Columns: register.BiodataPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: biodata.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.EducationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.EducationTable,
			Columns: register.EducationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: education.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.FamilyIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   register.FamilyTable,
			Columns: register.FamilyPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: family.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RegisterCreateBulk is the builder for creating many Register entities in bulk.
type RegisterCreateBulk struct {
	config
	builders []*RegisterCreate
}

// Save creates the Register entities in the database.
func (rcb *RegisterCreateBulk) Save(ctx context.Context) ([]*Register, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Register, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RegisterMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RegisterCreateBulk) SaveX(ctx context.Context) []*Register {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RegisterCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RegisterCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
