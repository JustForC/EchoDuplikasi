// Code generated by entc, DO NOT EDIT.

package ent

import (
	"Kynesia/ent/achievement"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Achievement is the model entity for the Achievement schema.
type Achievement struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name *string `json:"name,omitempty"`
	// Organizer holds the value of the "organizer" field.
	Organizer *string `json:"organizer,omitempty"`
	// Level holds the value of the "level" field.
	Level *string `json:"level,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AchievementQuery when eager-loading is set.
	Edges AchievementEdges `json:"edges"`
}

// AchievementEdges holds the relations/edges for other nodes in the graph.
type AchievementEdges struct {
	// Register holds the value of the register edge.
	Register []*Register `json:"register,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RegisterOrErr returns the Register value or an error if the edge
// was not loaded in eager-loading.
func (e AchievementEdges) RegisterOrErr() ([]*Register, error) {
	if e.loadedTypes[0] {
		return e.Register, nil
	}
	return nil, &NotLoadedError{edge: "register"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Achievement) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case achievement.FieldID:
			values[i] = new(sql.NullInt64)
		case achievement.FieldName, achievement.FieldOrganizer, achievement.FieldLevel:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Achievement", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Achievement fields.
func (a *Achievement) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case achievement.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case achievement.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				a.Name = new(string)
				*a.Name = value.String
			}
		case achievement.FieldOrganizer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field organizer", values[i])
			} else if value.Valid {
				a.Organizer = new(string)
				*a.Organizer = value.String
			}
		case achievement.FieldLevel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				a.Level = new(string)
				*a.Level = value.String
			}
		}
	}
	return nil
}

// QueryRegister queries the "register" edge of the Achievement entity.
func (a *Achievement) QueryRegister() *RegisterQuery {
	return (&AchievementClient{config: a.config}).QueryRegister(a)
}

// Update returns a builder for updating this Achievement.
// Note that you need to call Achievement.Unwrap() before calling this method if this Achievement
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Achievement) Update() *AchievementUpdateOne {
	return (&AchievementClient{config: a.config}).UpdateOne(a)
}

// Unwrap unwraps the Achievement entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Achievement) Unwrap() *Achievement {
	tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Achievement is not a transactional entity")
	}
	a.config.driver = tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Achievement) String() string {
	var builder strings.Builder
	builder.WriteString("Achievement(")
	builder.WriteString(fmt.Sprintf("id=%v", a.ID))
	if v := a.Name; v != nil {
		builder.WriteString(", name=")
		builder.WriteString(*v)
	}
	if v := a.Organizer; v != nil {
		builder.WriteString(", organizer=")
		builder.WriteString(*v)
	}
	if v := a.Level; v != nil {
		builder.WriteString(", level=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Achievements is a parsable slice of Achievement.
type Achievements []*Achievement

func (a Achievements) config(cfg config) {
	for _i := range a {
		a[_i].config = cfg
	}
}
